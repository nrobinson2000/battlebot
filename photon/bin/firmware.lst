
/Users/nrobinson/battlebot/photon/bin/firmware.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .module_info  00000018  080a0000  080a0000  00008000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000010f8  080a0018  080a0018  00008018  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .backup       00000004  40024000  080a1110  0000c000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  3 .data         00000004  20000300  080a1114  00010300  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .bss          0000023c  20000304  20000304  00018304  2**2
                  ALLOC
  5 .module_info_suffix 00000028  080a1118  080a1118  00011118  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .module_info_crc 00000004  080a1140  080a1140  00011140  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .debug_info   000728d1  00000000  00000000  00011144  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 0000f3f1  00000000  00000000  00083a15  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    0000bae5  00000000  00000000  00092e06  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_aranges 000015d8  00000000  00000000  0009e8eb  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00002270  00000000  00000000  0009fec3  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_macro  000203c0  00000000  00000000  000a2133  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_line   0001d45b  00000000  00000000  000c24f3  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    0006be20  00000000  00000000  000df94e  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_frame  00007264  00000000  00000000  0014b770  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080a0018 <user_part_module>:
 80a0018:	bc 0f 0a 08                                         ....

080a001c <module_user_pre_init>:
/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
 80a001c:	4809      	ldr	r0, [pc, #36]	; (80a0044 <module_user_pre_init+0x28>)
 80a001e:	490a      	ldr	r1, [pc, #40]	; (80a0048 <module_user_pre_init+0x2c>)
extern constructor_ptr_t link_constructors_end;

/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {
 80a0020:	b508      	push	{r3, lr}

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
 80a0022:	4288      	cmp	r0, r1
 80a0024:	d005      	beq.n	80a0032 <module_user_pre_init+0x16>
 80a0026:	4a09      	ldr	r2, [pc, #36]	; (80a004c <module_user_pre_init+0x30>)
 80a0028:	4282      	cmp	r2, r0
 80a002a:	d002      	beq.n	80a0032 <module_user_pre_init+0x16>
    {
        memcpy(&link_global_data_start, &link_global_data_initial_values, link_global_data_size);
 80a002c:	1a12      	subs	r2, r2, r0
 80a002e:	f000 ffa1 	bl	80a0f74 <memcpy>
    }

    memset(&link_bss_location, 0, link_bss_size );
 80a0032:	4807      	ldr	r0, [pc, #28]	; (80a0050 <module_user_pre_init+0x34>)
 80a0034:	4a07      	ldr	r2, [pc, #28]	; (80a0054 <module_user_pre_init+0x38>)
 80a0036:	2100      	movs	r1, #0
 80a0038:	1a12      	subs	r2, r2, r0
 80a003a:	f000 ffa6 	bl	80a0f8a <memset>
    return &link_heap_start;
}
 80a003e:	4806      	ldr	r0, [pc, #24]	; (80a0058 <module_user_pre_init+0x3c>)
 80a0040:	bd08      	pop	{r3, pc}
 80a0042:	bf00      	nop
 80a0044:	20000300 	.word	0x20000300
 80a0048:	080a1114 	.word	0x080a1114
 80a004c:	20000304 	.word	0x20000304
 80a0050:	20000304 	.word	0x20000304
 80a0054:	20000540 	.word	0x20000540
 80a0058:	20000540 	.word	0x20000540

080a005c <module_user_init>:
extern constructor_ptr_t link_constructors_location[];
extern constructor_ptr_t link_constructors_end;
#define link_constructors_size   ((unsigned long)&link_constructors_end  -  (unsigned long)&link_constructors_location )

void module_user_init()
{
 80a005c:	b570      	push	{r4, r5, r6, lr}
    module_user_init_hook();
 80a005e:	f000 fe15 	bl	80a0c8c <module_user_init_hook>

    // invoke constructors
    int ctor_num;
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
 80a0062:	4b07      	ldr	r3, [pc, #28]	; (80a0080 <module_user_init+0x24>)
 80a0064:	4c07      	ldr	r4, [pc, #28]	; (80a0084 <module_user_init+0x28>)
 80a0066:	461e      	mov	r6, r3
 80a0068:	1ae4      	subs	r4, r4, r3
 80a006a:	08a4      	lsrs	r4, r4, #2
 80a006c:	2500      	movs	r5, #0
 80a006e:	42a5      	cmp	r5, r4
 80a0070:	d004      	beq.n	80a007c <module_user_init+0x20>
    {
        link_constructors_location[ctor_num]();
 80a0072:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80a0076:	4798      	blx	r3
{
    module_user_init_hook();

    // invoke constructors
    int ctor_num;
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
 80a0078:	3501      	adds	r5, #1
 80a007a:	e7f8      	b.n	80a006e <module_user_init+0x12>
    {
        link_constructors_location[ctor_num]();
    }
}
 80a007c:	bd70      	pop	{r4, r5, r6, pc}
 80a007e:	bf00      	nop
 80a0080:	080a10ac 	.word	0x080a10ac
 80a0084:	080a1104 	.word	0x080a1104

080a0088 <module_user_setup>:

/**
 * Export these functions with a fuller name so they don't clash with the setup/loop wrappers in the system module.
 */
void module_user_setup() {
    setup();
 80a0088:	f000 b8ea 	b.w	80a0260 <setup>

080a008c <module_user_loop>:
}

void module_user_loop() {
 80a008c:	b508      	push	{r3, lr}
    loop();
 80a008e:	f000 f901 	bl	80a0294 <loop>
    _post_loop();
}
 80a0092:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    setup();
}

void module_user_loop() {
    loop();
    _post_loop();
 80a0096:	f000 bde3 	b.w	80a0c60 <_post_loop>

080a009a <_ZdlPv>:
	return malloc(size);
}

void operator delete(void *p)
{
	free(p);
 80a009a:	f000 b9cd 	b.w	80a0438 <free>

080a009e <__cxa_guard_acquire>:

/* Provide default implemenation for __cxa_guard_acquire() and
 * __cxa_guard_release(). Note: these must be revisited if a multitasking
 * OS is ported to this platform. */
__extension__ typedef int __guard __attribute__((mode (__DI__)));
int __cxa_guard_acquire(__guard *g) {return !*(char *)(g);};
 80a009e:	7800      	ldrb	r0, [r0, #0]
 80a00a0:	fab0 f080 	clz	r0, r0
 80a00a4:	0940      	lsrs	r0, r0, #5
 80a00a6:	4770      	bx	lr

080a00a8 <__cxa_guard_release>:
void __cxa_guard_release (__guard *g) {*(char *)g = 1;};
 80a00a8:	2301      	movs	r3, #1
 80a00aa:	7003      	strb	r3, [r0, #0]
 80a00ac:	4770      	bx	lr
	...

080a00b0 <_Z10moveMotors6String>:
// fl - fr - bl - br
// 1 = Move forward; 2 = Move backwards; 0 = Don't move
// XX = speed / 5 ; if XX == 51; then speed = 255 ..; if XX == 00; then speed == 0

int moveMotors(String command)
{
 80a00b0:	b530      	push	{r4, r5, lr}
 80a00b2:	4604      	mov	r4, r0
 80a00b4:	b095      	sub	sp, #84	; 0x54
  String flcom = command.substring(0,3);
 80a00b6:	4668      	mov	r0, sp
 80a00b8:	4621      	mov	r1, r4
 80a00ba:	2200      	movs	r2, #0
 80a00bc:	2303      	movs	r3, #3
 80a00be:	f000 fc3d 	bl	80a093c <_ZNK6String9substringEjj>
  String frcom = command.substring(4,7);
 80a00c2:	a804      	add	r0, sp, #16
 80a00c4:	4621      	mov	r1, r4
 80a00c6:	2204      	movs	r2, #4
 80a00c8:	2307      	movs	r3, #7
 80a00ca:	f000 fc37 	bl	80a093c <_ZNK6String9substringEjj>
  String blcom = command.substring(8,11);
 80a00ce:	a808      	add	r0, sp, #32
 80a00d0:	4621      	mov	r1, r4
 80a00d2:	2208      	movs	r2, #8
 80a00d4:	230b      	movs	r3, #11
 80a00d6:	f000 fc31 	bl	80a093c <_ZNK6String9substringEjj>
  String brcom = command.substring(12,15);
 80a00da:	220c      	movs	r2, #12
 80a00dc:	230f      	movs	r3, #15
 80a00de:	4621      	mov	r1, r4
 80a00e0:	a80c      	add	r0, sp, #48	; 0x30
 80a00e2:	f000 fc2b 	bl	80a093c <_ZNK6String9substringEjj>

  Serial1.println("fl " + flcom);
 80a00e6:	f000 fd05 	bl	80a0af4 <_Z22__fetch_global_Serial1v>

class StringSumHelper : public String
{
public:
	StringSumHelper(const String &s) : String(s) {}
	StringSumHelper(const char *p) : String(p) {}
 80a00ea:	4c59      	ldr	r4, [pc, #356]	; (80a0250 <_Z10moveMotors6String+0x1a0>)
 80a00ec:	4605      	mov	r5, r0
 80a00ee:	4621      	mov	r1, r4
 80a00f0:	a810      	add	r0, sp, #64	; 0x40
 80a00f2:	f000 fbc1 	bl	80a0878 <_ZN6StringC1EPKc>
 80a00f6:	4669      	mov	r1, sp
 80a00f8:	a810      	add	r0, sp, #64	; 0x40
 80a00fa:	f000 fc12 	bl	80a0922 <_ZplRK15StringSumHelperRK6String>
 80a00fe:	4603      	mov	r3, r0
 80a0100:	4628      	mov	r0, r5
 80a0102:	6819      	ldr	r1, [r3, #0]
 80a0104:	f000 fadf 	bl	80a06c6 <_ZN5Print7printlnEPKc>

        friend class StringPrintableHelper;

};

class StringSumHelper : public String
 80a0108:	a810      	add	r0, sp, #64	; 0x40
 80a010a:	f000 fb73 	bl	80a07f4 <_ZN6StringD1Ev>
  Serial.println("fl " + flcom);
 80a010e:	f000 fd4d 	bl	80a0bac <_Z20_fetch_global_serialv>
{
public:
	StringSumHelper(const String &s) : String(s) {}
	StringSumHelper(const char *p) : String(p) {}
 80a0112:	4621      	mov	r1, r4
 80a0114:	4605      	mov	r5, r0
 80a0116:	a810      	add	r0, sp, #64	; 0x40
 80a0118:	f000 fbae 	bl	80a0878 <_ZN6StringC1EPKc>
 80a011c:	4669      	mov	r1, sp
 80a011e:	a810      	add	r0, sp, #64	; 0x40
 80a0120:	f000 fbff 	bl	80a0922 <_ZplRK15StringSumHelperRK6String>
 80a0124:	4603      	mov	r3, r0
 80a0126:	4628      	mov	r0, r5
 80a0128:	6819      	ldr	r1, [r3, #0]
 80a012a:	f000 facc 	bl	80a06c6 <_ZN5Print7printlnEPKc>

        friend class StringPrintableHelper;

};

class StringSumHelper : public String
 80a012e:	a810      	add	r0, sp, #64	; 0x40
 80a0130:	f000 fb60 	bl	80a07f4 <_ZN6StringD1Ev>
  delay(50);
 80a0134:	2032      	movs	r0, #50	; 0x32
 80a0136:	f000 f98f 	bl	80a0458 <delay>
  Serial1.println("fr " + frcom);
 80a013a:	f000 fcdb 	bl	80a0af4 <_Z22__fetch_global_Serial1v>
{
public:
	StringSumHelper(const String &s) : String(s) {}
	StringSumHelper(const char *p) : String(p) {}
 80a013e:	4c45      	ldr	r4, [pc, #276]	; (80a0254 <_Z10moveMotors6String+0x1a4>)
 80a0140:	4605      	mov	r5, r0
 80a0142:	4621      	mov	r1, r4
 80a0144:	a810      	add	r0, sp, #64	; 0x40
 80a0146:	f000 fb97 	bl	80a0878 <_ZN6StringC1EPKc>
 80a014a:	a904      	add	r1, sp, #16
 80a014c:	a810      	add	r0, sp, #64	; 0x40
 80a014e:	f000 fbe8 	bl	80a0922 <_ZplRK15StringSumHelperRK6String>
 80a0152:	4603      	mov	r3, r0
 80a0154:	4628      	mov	r0, r5
 80a0156:	6819      	ldr	r1, [r3, #0]
 80a0158:	f000 fab5 	bl	80a06c6 <_ZN5Print7printlnEPKc>

        friend class StringPrintableHelper;

};

class StringSumHelper : public String
 80a015c:	a810      	add	r0, sp, #64	; 0x40
 80a015e:	f000 fb49 	bl	80a07f4 <_ZN6StringD1Ev>
  Serial.println("fr " + frcom);
 80a0162:	f000 fd23 	bl	80a0bac <_Z20_fetch_global_serialv>
{
public:
	StringSumHelper(const String &s) : String(s) {}
	StringSumHelper(const char *p) : String(p) {}
 80a0166:	4621      	mov	r1, r4
 80a0168:	4605      	mov	r5, r0
 80a016a:	a810      	add	r0, sp, #64	; 0x40
 80a016c:	f000 fb84 	bl	80a0878 <_ZN6StringC1EPKc>
 80a0170:	a904      	add	r1, sp, #16
 80a0172:	a810      	add	r0, sp, #64	; 0x40
 80a0174:	f000 fbd5 	bl	80a0922 <_ZplRK15StringSumHelperRK6String>
 80a0178:	4603      	mov	r3, r0
 80a017a:	4628      	mov	r0, r5
 80a017c:	6819      	ldr	r1, [r3, #0]
 80a017e:	f000 faa2 	bl	80a06c6 <_ZN5Print7printlnEPKc>

        friend class StringPrintableHelper;

};

class StringSumHelper : public String
 80a0182:	a810      	add	r0, sp, #64	; 0x40
 80a0184:	f000 fb36 	bl	80a07f4 <_ZN6StringD1Ev>
  delay(50);
 80a0188:	2032      	movs	r0, #50	; 0x32
 80a018a:	f000 f965 	bl	80a0458 <delay>
  Serial1.println("bl " + blcom);
 80a018e:	f000 fcb1 	bl	80a0af4 <_Z22__fetch_global_Serial1v>
{
public:
	StringSumHelper(const String &s) : String(s) {}
	StringSumHelper(const char *p) : String(p) {}
 80a0192:	4c31      	ldr	r4, [pc, #196]	; (80a0258 <_Z10moveMotors6String+0x1a8>)
 80a0194:	4605      	mov	r5, r0
 80a0196:	4621      	mov	r1, r4
 80a0198:	a810      	add	r0, sp, #64	; 0x40
 80a019a:	f000 fb6d 	bl	80a0878 <_ZN6StringC1EPKc>
 80a019e:	a908      	add	r1, sp, #32
 80a01a0:	a810      	add	r0, sp, #64	; 0x40
 80a01a2:	f000 fbbe 	bl	80a0922 <_ZplRK15StringSumHelperRK6String>
 80a01a6:	4603      	mov	r3, r0
 80a01a8:	4628      	mov	r0, r5
 80a01aa:	6819      	ldr	r1, [r3, #0]
 80a01ac:	f000 fa8b 	bl	80a06c6 <_ZN5Print7printlnEPKc>

        friend class StringPrintableHelper;

};

class StringSumHelper : public String
 80a01b0:	a810      	add	r0, sp, #64	; 0x40
 80a01b2:	f000 fb1f 	bl	80a07f4 <_ZN6StringD1Ev>
  Serial.println("bl " + blcom);
 80a01b6:	f000 fcf9 	bl	80a0bac <_Z20_fetch_global_serialv>
{
public:
	StringSumHelper(const String &s) : String(s) {}
	StringSumHelper(const char *p) : String(p) {}
 80a01ba:	4621      	mov	r1, r4
 80a01bc:	4605      	mov	r5, r0
 80a01be:	a810      	add	r0, sp, #64	; 0x40
 80a01c0:	f000 fb5a 	bl	80a0878 <_ZN6StringC1EPKc>
 80a01c4:	a908      	add	r1, sp, #32
 80a01c6:	a810      	add	r0, sp, #64	; 0x40
 80a01c8:	f000 fbab 	bl	80a0922 <_ZplRK15StringSumHelperRK6String>
 80a01cc:	4603      	mov	r3, r0
 80a01ce:	4628      	mov	r0, r5
 80a01d0:	6819      	ldr	r1, [r3, #0]
 80a01d2:	f000 fa78 	bl	80a06c6 <_ZN5Print7printlnEPKc>

        friend class StringPrintableHelper;

};

class StringSumHelper : public String
 80a01d6:	a810      	add	r0, sp, #64	; 0x40
 80a01d8:	f000 fb0c 	bl	80a07f4 <_ZN6StringD1Ev>
  delay(50);
 80a01dc:	2032      	movs	r0, #50	; 0x32
 80a01de:	f000 f93b 	bl	80a0458 <delay>
  Serial1.println("br " + brcom);
 80a01e2:	f000 fc87 	bl	80a0af4 <_Z22__fetch_global_Serial1v>
{
public:
	StringSumHelper(const String &s) : String(s) {}
	StringSumHelper(const char *p) : String(p) {}
 80a01e6:	4c1d      	ldr	r4, [pc, #116]	; (80a025c <_Z10moveMotors6String+0x1ac>)
 80a01e8:	4605      	mov	r5, r0
 80a01ea:	4621      	mov	r1, r4
 80a01ec:	a810      	add	r0, sp, #64	; 0x40
 80a01ee:	f000 fb43 	bl	80a0878 <_ZN6StringC1EPKc>
 80a01f2:	a90c      	add	r1, sp, #48	; 0x30
 80a01f4:	a810      	add	r0, sp, #64	; 0x40
 80a01f6:	f000 fb94 	bl	80a0922 <_ZplRK15StringSumHelperRK6String>
 80a01fa:	4603      	mov	r3, r0
 80a01fc:	4628      	mov	r0, r5
 80a01fe:	6819      	ldr	r1, [r3, #0]
 80a0200:	f000 fa61 	bl	80a06c6 <_ZN5Print7printlnEPKc>

        friend class StringPrintableHelper;

};

class StringSumHelper : public String
 80a0204:	a810      	add	r0, sp, #64	; 0x40
 80a0206:	f000 faf5 	bl	80a07f4 <_ZN6StringD1Ev>
  Serial.println("br " + brcom);
 80a020a:	f000 fccf 	bl	80a0bac <_Z20_fetch_global_serialv>
{
public:
	StringSumHelper(const String &s) : String(s) {}
	StringSumHelper(const char *p) : String(p) {}
 80a020e:	4621      	mov	r1, r4
 80a0210:	4605      	mov	r5, r0
 80a0212:	a810      	add	r0, sp, #64	; 0x40
 80a0214:	f000 fb30 	bl	80a0878 <_ZN6StringC1EPKc>
 80a0218:	a90c      	add	r1, sp, #48	; 0x30
 80a021a:	a810      	add	r0, sp, #64	; 0x40
 80a021c:	f000 fb81 	bl	80a0922 <_ZplRK15StringSumHelperRK6String>
 80a0220:	4603      	mov	r3, r0
 80a0222:	4628      	mov	r0, r5
 80a0224:	6819      	ldr	r1, [r3, #0]
 80a0226:	f000 fa4e 	bl	80a06c6 <_ZN5Print7printlnEPKc>

        friend class StringPrintableHelper;

};

class StringSumHelper : public String
 80a022a:	a810      	add	r0, sp, #64	; 0x40
 80a022c:	f000 fae2 	bl	80a07f4 <_ZN6StringD1Ev>
int moveMotors(String command)
{
  String flcom = command.substring(0,3);
  String frcom = command.substring(4,7);
  String blcom = command.substring(8,11);
  String brcom = command.substring(12,15);
 80a0230:	a80c      	add	r0, sp, #48	; 0x30
 80a0232:	f000 fadf 	bl	80a07f4 <_ZN6StringD1Ev>

int moveMotors(String command)
{
  String flcom = command.substring(0,3);
  String frcom = command.substring(4,7);
  String blcom = command.substring(8,11);
 80a0236:	a808      	add	r0, sp, #32
 80a0238:	f000 fadc 	bl	80a07f4 <_ZN6StringD1Ev>
// XX = speed / 5 ; if XX == 51; then speed = 255 ..; if XX == 00; then speed == 0

int moveMotors(String command)
{
  String flcom = command.substring(0,3);
  String frcom = command.substring(4,7);
 80a023c:	a804      	add	r0, sp, #16
 80a023e:	f000 fad9 	bl	80a07f4 <_ZN6StringD1Ev>
  Serial.println("bl " + blcom);
  delay(50);
  Serial1.println("br " + brcom);
  Serial.println("br " + brcom);

  return 1;
 80a0242:	4668      	mov	r0, sp
 80a0244:	f000 fad6 	bl	80a07f4 <_ZN6StringD1Ev>
}
 80a0248:	2001      	movs	r0, #1
 80a024a:	b015      	add	sp, #84	; 0x54
 80a024c:	bd30      	pop	{r4, r5, pc}
 80a024e:	bf00      	nop
 80a0250:	080a0fd0 	.word	0x080a0fd0
 80a0254:	080a0fd4 	.word	0x080a0fd4
 80a0258:	080a0fd8 	.word	0x080a0fd8
 80a025c:	080a0fdc 	.word	0x080a0fdc

080a0260 <setup>:


void setup()
{
 80a0260:	b508      	push	{r3, lr}
        return _function(name, args...);
    }

    static bool _function(const char *funcKey, user_function_int_str_t* func)
    {
        return CLOUD_FN(register_function(call_raw_user_function, (void*)func, funcKey), false);
 80a0262:	4a09      	ldr	r2, [pc, #36]	; (80a0288 <setup+0x28>)
 80a0264:	4909      	ldr	r1, [pc, #36]	; (80a028c <setup+0x2c>)
 80a0266:	480a      	ldr	r0, [pc, #40]	; (80a0290 <setup+0x30>)
 80a0268:	f000 f940 	bl	80a04ec <_ZN10CloudClass17register_functionEPFiPvPKcS0_ES0_S2_>
Particle.function("move", moveMotors);
Serial1.begin(9600);
 80a026c:	f000 fc42 	bl	80a0af4 <_Z22__fetch_global_Serial1v>
 80a0270:	f44f 5116 	mov.w	r1, #9600	; 0x2580
 80a0274:	f000 fc3a 	bl	80a0aec <_ZN11USARTSerial5beginEm>
Serial.begin(9600);
 80a0278:	f000 fc98 	bl	80a0bac <_Z20_fetch_global_serialv>

}
 80a027c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}

void setup()
{
Particle.function("move", moveMotors);
Serial1.begin(9600);
Serial.begin(9600);
 80a0280:	f44f 5116 	mov.w	r1, #9600	; 0x2580
 80a0284:	f000 bc8e 	b.w	80a0ba4 <_ZN9USBSerial5beginEl>
 80a0288:	080a0fe0 	.word	0x080a0fe0
 80a028c:	080a00b1 	.word	0x080a00b1
 80a0290:	080a04c1 	.word	0x080a04c1

080a0294 <loop>:

}

void loop()
{
 80a0294:	4770      	bx	lr
	...

080a0298 <_GLOBAL__sub_I__Z10moveMotors6String>:

}
 80a0298:	b508      	push	{r3, lr}
{
public:
    typedef uint8_t flag_t;
    inline SleepNetworkFlag(SystemSleepNetwork f) : SleepNetworkFlag(static_cast<flag_t>(f)) {}

    inline SleepNetworkFlag(flag_t flag) : flag_(flag) {}
 80a029a:	4b09      	ldr	r3, [pc, #36]	; (80a02c0 <_GLOBAL__sub_I__Z10moveMotors6String+0x28>)
 80a029c:	2200      	movs	r2, #0
 80a029e:	4909      	ldr	r1, [pc, #36]	; (80a02c4 <_GLOBAL__sub_I__Z10moveMotors6String+0x2c>)
 80a02a0:	701a      	strb	r2, [r3, #0]
 80a02a2:	2301      	movs	r3, #1
 80a02a4:	700b      	strb	r3, [r1, #0]

class PublishFlag
{
public:
	typedef uint8_t flag_t;
	PublishFlag(flag_t flag) : flag_(flag) {}
 80a02a6:	4908      	ldr	r1, [pc, #32]	; (80a02c8 <_GLOBAL__sub_I__Z10moveMotors6String+0x30>)
 80a02a8:	700a      	strb	r2, [r1, #0]
 80a02aa:	4a08      	ldr	r2, [pc, #32]	; (80a02cc <_GLOBAL__sub_I__Z10moveMotors6String+0x34>)
 80a02ac:	7013      	strb	r3, [r2, #0]
 80a02ae:	4b08      	ldr	r3, [pc, #32]	; (80a02d0 <_GLOBAL__sub_I__Z10moveMotors6String+0x38>)
 80a02b0:	2202      	movs	r2, #2
 80a02b2:	701a      	strb	r2, [r3, #0]
inline int32_t pinReadFast(pin_t _pin)
{
	return ((PIN_MAP[_pin].gpio_peripheral->IDR & PIN_MAP[_pin].gpio_pin) == 0 ? LOW : HIGH);
}
#elif defined(STM32F2XX)
static STM32_Pin_Info* PIN_MAP = HAL_Pin_Map();
 80a02b4:	f000 f820 	bl	80a02f8 <HAL_Pin_Map>
 80a02b8:	4b06      	ldr	r3, [pc, #24]	; (80a02d4 <_GLOBAL__sub_I__Z10moveMotors6String+0x3c>)
 80a02ba:	6018      	str	r0, [r3, #0]
 80a02bc:	bd08      	pop	{r3, pc}
 80a02be:	bf00      	nop
 80a02c0:	2000030b 	.word	0x2000030b
 80a02c4:	20000310 	.word	0x20000310
 80a02c8:	20000309 	.word	0x20000309
 80a02cc:	2000030a 	.word	0x2000030a
 80a02d0:	20000308 	.word	0x20000308
 80a02d4:	2000030c 	.word	0x2000030c

080a02d8 <HAL_RNG_GetRandomNumber>:

DYNALIB_BEGIN(hal)

#if PLATFORM_ID > 3
DYNALIB_FN(0, hal, HAL_RNG_Configuration, void(void))
DYNALIB_FN(1, hal, HAL_RNG_GetRandomNumber, uint32_t(void))
 80a02d8:	b508      	push	{r3, lr}
 80a02da:	4b02      	ldr	r3, [pc, #8]	; (80a02e4 <HAL_RNG_GetRandomNumber+0xc>)
 80a02dc:	681b      	ldr	r3, [r3, #0]
 80a02de:	685b      	ldr	r3, [r3, #4]
 80a02e0:	9301      	str	r3, [sp, #4]
 80a02e2:	bd08      	pop	{r3, pc}
 80a02e4:	0806019c 	.word	0x0806019c

080a02e8 <HAL_Timer_Get_Milli_Seconds>:
#endif

DYNALIB_FN(BASE_IDX + 0, hal, HAL_Delay_Milliseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 1, hal, HAL_Delay_Microseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal, HAL_Timer_Get_Micro_Seconds, system_tick_t(void))
DYNALIB_FN(BASE_IDX + 3, hal, HAL_Timer_Get_Milli_Seconds, system_tick_t(void))
 80a02e8:	b508      	push	{r3, lr}
 80a02ea:	4b02      	ldr	r3, [pc, #8]	; (80a02f4 <HAL_Timer_Get_Milli_Seconds+0xc>)
 80a02ec:	681b      	ldr	r3, [r3, #0]
 80a02ee:	695b      	ldr	r3, [r3, #20]
 80a02f0:	9301      	str	r3, [sp, #4]
 80a02f2:	bd08      	pop	{r3, pc}
 80a02f4:	0806019c 	.word	0x0806019c

080a02f8 <HAL_Pin_Map>:
// New HAL functions must be added to the end of this list.
// GNINRAW

DYNALIB_BEGIN(hal_gpio)

DYNALIB_FN(0, hal_gpio, HAL_Pin_Map, STM32_Pin_Info*(void))
 80a02f8:	b508      	push	{r3, lr}
 80a02fa:	4b02      	ldr	r3, [pc, #8]	; (80a0304 <HAL_Pin_Map+0xc>)
 80a02fc:	681b      	ldr	r3, [r3, #0]
 80a02fe:	681b      	ldr	r3, [r3, #0]
 80a0300:	9301      	str	r3, [sp, #4]
 80a0302:	bd08      	pop	{r3, pc}
 80a0304:	080601b0 	.word	0x080601b0

080a0308 <HAL_SPI_Init>:
DYNALIB_FN(2, hal_spi, HAL_SPI_Set_Bit_Order, void(HAL_SPI_Interface, uint8_t))
DYNALIB_FN(3, hal_spi, HAL_SPI_Set_Data_Mode, void(HAL_SPI_Interface, uint8_t))
DYNALIB_FN(4, hal_spi, HAL_SPI_Set_Clock_Divider, void(HAL_SPI_Interface, uint8_t))
DYNALIB_FN(5, hal_spi, HAL_SPI_Send_Receive_Data, uint16_t(HAL_SPI_Interface, uint16_t))
DYNALIB_FN(6, hal_spi, HAL_SPI_Is_Enabled_Old, bool(void))
DYNALIB_FN(7, hal_spi, HAL_SPI_Init, void(HAL_SPI_Interface))
 80a0308:	b508      	push	{r3, lr}
 80a030a:	4b02      	ldr	r3, [pc, #8]	; (80a0314 <HAL_SPI_Init+0xc>)
 80a030c:	681b      	ldr	r3, [r3, #0]
 80a030e:	69db      	ldr	r3, [r3, #28]
 80a0310:	9301      	str	r3, [sp, #4]
 80a0312:	bd08      	pop	{r3, pc}
 80a0314:	080601b4 	.word	0x080601b4

080a0318 <USB_USART_Init>:
// GNINRAW

DYNALIB_BEGIN(hal_usart)

#ifdef USB_CDC_ENABLE
DYNALIB_FN(0, hal_usart, USB_USART_Init, void(uint32_t))
 80a0318:	b508      	push	{r3, lr}
 80a031a:	4b02      	ldr	r3, [pc, #8]	; (80a0324 <USB_USART_Init+0xc>)
 80a031c:	681b      	ldr	r3, [r3, #0]
 80a031e:	681b      	ldr	r3, [r3, #0]
 80a0320:	9301      	str	r3, [sp, #4]
 80a0322:	bd08      	pop	{r3, pc}
 80a0324:	080601c4 	.word	0x080601c4

080a0328 <USB_USART_Available_Data>:
DYNALIB_FN(1, hal_usart, USB_USART_Available_Data, uint8_t(void))
 80a0328:	b508      	push	{r3, lr}
 80a032a:	4b02      	ldr	r3, [pc, #8]	; (80a0334 <USB_USART_Available_Data+0xc>)
 80a032c:	681b      	ldr	r3, [r3, #0]
 80a032e:	685b      	ldr	r3, [r3, #4]
 80a0330:	9301      	str	r3, [sp, #4]
 80a0332:	bd08      	pop	{r3, pc}
 80a0334:	080601c4 	.word	0x080601c4

080a0338 <USB_USART_Receive_Data>:
DYNALIB_FN(2, hal_usart, USB_USART_Receive_Data, int32_t(uint8_t))
 80a0338:	b508      	push	{r3, lr}
 80a033a:	4b02      	ldr	r3, [pc, #8]	; (80a0344 <USB_USART_Receive_Data+0xc>)
 80a033c:	681b      	ldr	r3, [r3, #0]
 80a033e:	689b      	ldr	r3, [r3, #8]
 80a0340:	9301      	str	r3, [sp, #4]
 80a0342:	bd08      	pop	{r3, pc}
 80a0344:	080601c4 	.word	0x080601c4

080a0348 <USB_USART_Send_Data>:
DYNALIB_FN(3, hal_usart, USB_USART_Send_Data, void(uint8_t))
 80a0348:	b508      	push	{r3, lr}
 80a034a:	4b02      	ldr	r3, [pc, #8]	; (80a0354 <USB_USART_Send_Data+0xc>)
 80a034c:	681b      	ldr	r3, [r3, #0]
 80a034e:	68db      	ldr	r3, [r3, #12]
 80a0350:	9301      	str	r3, [sp, #4]
 80a0352:	bd08      	pop	{r3, pc}
 80a0354:	080601c4 	.word	0x080601c4

080a0358 <HAL_USART_Init>:
#define BASE_IDX 6 // Base index for all subsequent functions
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal_usart, HAL_USART_Init, void(HAL_USART_Serial, Ring_Buffer*, Ring_Buffer*))
 80a0358:	b508      	push	{r3, lr}
 80a035a:	4b02      	ldr	r3, [pc, #8]	; (80a0364 <HAL_USART_Init+0xc>)
 80a035c:	681b      	ldr	r3, [r3, #0]
 80a035e:	699b      	ldr	r3, [r3, #24]
 80a0360:	9301      	str	r3, [sp, #4]
 80a0362:	bd08      	pop	{r3, pc}
 80a0364:	080601c4 	.word	0x080601c4

080a0368 <HAL_USART_Write_Data>:
DYNALIB_FN(BASE_IDX + 1, hal_usart, HAL_USART_Begin, void(HAL_USART_Serial, uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal_usart, HAL_USART_End, void(HAL_USART_Serial))
DYNALIB_FN(BASE_IDX + 3, hal_usart, HAL_USART_Write_Data, uint32_t(HAL_USART_Serial, uint8_t))
 80a0368:	b508      	push	{r3, lr}
 80a036a:	4b02      	ldr	r3, [pc, #8]	; (80a0374 <HAL_USART_Write_Data+0xc>)
 80a036c:	681b      	ldr	r3, [r3, #0]
 80a036e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80a0370:	9301      	str	r3, [sp, #4]
 80a0372:	bd08      	pop	{r3, pc}
 80a0374:	080601c4 	.word	0x080601c4

080a0378 <HAL_USART_Available_Data>:
DYNALIB_FN(BASE_IDX + 4, hal_usart, HAL_USART_Available_Data, int32_t(HAL_USART_Serial))
 80a0378:	b508      	push	{r3, lr}
 80a037a:	4b02      	ldr	r3, [pc, #8]	; (80a0384 <HAL_USART_Available_Data+0xc>)
 80a037c:	681b      	ldr	r3, [r3, #0]
 80a037e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80a0380:	9301      	str	r3, [sp, #4]
 80a0382:	bd08      	pop	{r3, pc}
 80a0384:	080601c4 	.word	0x080601c4

080a0388 <HAL_USART_Read_Data>:
DYNALIB_FN(BASE_IDX + 5, hal_usart, HAL_USART_Read_Data, int32_t(HAL_USART_Serial))
 80a0388:	b508      	push	{r3, lr}
 80a038a:	4b02      	ldr	r3, [pc, #8]	; (80a0394 <HAL_USART_Read_Data+0xc>)
 80a038c:	681b      	ldr	r3, [r3, #0]
 80a038e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80a0390:	9301      	str	r3, [sp, #4]
 80a0392:	bd08      	pop	{r3, pc}
 80a0394:	080601c4 	.word	0x080601c4

080a0398 <HAL_USART_Peek_Data>:
DYNALIB_FN(BASE_IDX + 6, hal_usart, HAL_USART_Peek_Data, int32_t(HAL_USART_Serial))
 80a0398:	b508      	push	{r3, lr}
 80a039a:	4b02      	ldr	r3, [pc, #8]	; (80a03a4 <HAL_USART_Peek_Data+0xc>)
 80a039c:	681b      	ldr	r3, [r3, #0]
 80a039e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80a03a0:	9301      	str	r3, [sp, #4]
 80a03a2:	bd08      	pop	{r3, pc}
 80a03a4:	080601c4 	.word	0x080601c4

080a03a8 <HAL_USART_Flush_Data>:
DYNALIB_FN(BASE_IDX + 7, hal_usart, HAL_USART_Flush_Data, void(HAL_USART_Serial))
 80a03a8:	b508      	push	{r3, lr}
 80a03aa:	4b02      	ldr	r3, [pc, #8]	; (80a03b4 <HAL_USART_Flush_Data+0xc>)
 80a03ac:	681b      	ldr	r3, [r3, #0]
 80a03ae:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80a03b0:	9301      	str	r3, [sp, #4]
 80a03b2:	bd08      	pop	{r3, pc}
 80a03b4:	080601c4 	.word	0x080601c4

080a03b8 <HAL_USART_Available_Data_For_Write>:
DYNALIB_FN(BASE_IDX + 8, hal_usart, HAL_USART_Is_Enabled, bool(HAL_USART_Serial))
DYNALIB_FN(BASE_IDX + 9, hal_usart, HAL_USART_Half_Duplex, void(HAL_USART_Serial, bool))
DYNALIB_FN(BASE_IDX + 10, hal_usart, HAL_USART_Available_Data_For_Write, int32_t(HAL_USART_Serial))
 80a03b8:	b508      	push	{r3, lr}
 80a03ba:	4b02      	ldr	r3, [pc, #8]	; (80a03c4 <HAL_USART_Available_Data_For_Write+0xc>)
 80a03bc:	681b      	ldr	r3, [r3, #0]
 80a03be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80a03c0:	9301      	str	r3, [sp, #4]
 80a03c2:	bd08      	pop	{r3, pc}
 80a03c4:	080601c4 	.word	0x080601c4

080a03c8 <USB_USART_Available_Data_For_Write>:

#ifdef USB_CDC_ENABLE
DYNALIB_FN(BASE_IDX + 11, hal_usart, USB_USART_Available_Data_For_Write, int32_t(void))
 80a03c8:	b508      	push	{r3, lr}
 80a03ca:	4b02      	ldr	r3, [pc, #8]	; (80a03d4 <USB_USART_Available_Data_For_Write+0xc>)
 80a03cc:	681b      	ldr	r3, [r3, #0]
 80a03ce:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80a03d0:	9301      	str	r3, [sp, #4]
 80a03d2:	bd08      	pop	{r3, pc}
 80a03d4:	080601c4 	.word	0x080601c4

080a03d8 <USB_USART_Flush_Data>:
DYNALIB_FN(BASE_IDX + 12, hal_usart, USB_USART_Flush_Data, void(void))
 80a03d8:	b508      	push	{r3, lr}
 80a03da:	4b02      	ldr	r3, [pc, #8]	; (80a03e4 <USB_USART_Flush_Data+0xc>)
 80a03dc:	681b      	ldr	r3, [r3, #0]
 80a03de:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80a03e0:	9301      	str	r3, [sp, #4]
 80a03e2:	bd08      	pop	{r3, pc}
 80a03e4:	080601c4 	.word	0x080601c4

080a03e8 <HAL_USART_BeginConfig>:
#define BASE_IDX2 (BASE_IDX+13)
#else
#define BASE_IDX2 (BASE_IDX+11)
#endif

DYNALIB_FN(BASE_IDX2 + 0, hal_usart,HAL_USART_BeginConfig,void(HAL_USART_Serial serial, uint32_t baud, uint32_t config, void *ptr))
 80a03e8:	b508      	push	{r3, lr}
 80a03ea:	4b02      	ldr	r3, [pc, #8]	; (80a03f4 <HAL_USART_BeginConfig+0xc>)
 80a03ec:	681b      	ldr	r3, [r3, #0]
 80a03ee:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80a03f0:	9301      	str	r3, [sp, #4]
 80a03f2:	bd08      	pop	{r3, pc}
 80a03f4:	080601c4 	.word	0x080601c4

080a03f8 <set_system_mode>:
#endif

DYNALIB_BEGIN(system)

DYNALIB_FN(0, system, system_mode, System_Mode_TypeDef(void))
DYNALIB_FN(1, system, set_system_mode, void(System_Mode_TypeDef))
 80a03f8:	b508      	push	{r3, lr}
 80a03fa:	4b02      	ldr	r3, [pc, #8]	; (80a0404 <set_system_mode+0xc>)
 80a03fc:	681b      	ldr	r3, [r3, #0]
 80a03fe:	685b      	ldr	r3, [r3, #4]
 80a0400:	9301      	str	r3, [sp, #4]
 80a0402:	bd08      	pop	{r3, pc}
 80a0404:	080601a4 	.word	0x080601a4

080a0408 <system_delay_ms>:

DYNALIB_FN(2, system, set_ymodem_serial_flash_update_handler, void(ymodem_serial_flash_update_handler))
DYNALIB_FN(3, system, system_firmwareUpdate, bool(Stream*, void*))
DYNALIB_FN(4, system, system_fileTransfer, bool(system_file_transfer_t*, void*))

DYNALIB_FN(5, system, system_delay_ms, void(unsigned long, bool))
 80a0408:	b508      	push	{r3, lr}
 80a040a:	4b02      	ldr	r3, [pc, #8]	; (80a0414 <system_delay_ms+0xc>)
 80a040c:	681b      	ldr	r3, [r3, #0]
 80a040e:	695b      	ldr	r3, [r3, #20]
 80a0410:	9301      	str	r3, [sp, #4]
 80a0412:	bd08      	pop	{r3, pc}
 80a0414:	080601a4 	.word	0x080601a4

080a0418 <spark_function>:


DYNALIB_BEGIN(system_cloud)

DYNALIB_FN(0, system_cloud, spark_variable, bool(const char*, const void*, Spark_Data_TypeDef, spark_variable_t*))
DYNALIB_FN(1, system_cloud, spark_function, bool(const char*, p_user_function_int_str_t, void*))
 80a0418:	b508      	push	{r3, lr}
 80a041a:	4b02      	ldr	r3, [pc, #8]	; (80a0424 <spark_function+0xc>)
 80a041c:	681b      	ldr	r3, [r3, #0]
 80a041e:	685b      	ldr	r3, [r3, #4]
 80a0420:	9301      	str	r3, [sp, #4]
 80a0422:	bd08      	pop	{r3, pc}
 80a0424:	080601cc 	.word	0x080601cc

080a0428 <network_ready>:

DYNALIB_FN(0, system_net, network_config, const void*(network_handle_t, uint32_t, void*))
DYNALIB_FN(1, system_net, network_connect, void(network_handle_t, uint32_t, uint32_t, void*))
DYNALIB_FN(2, system_net, network_connecting, bool(network_handle_t, uint32_t, void*))
DYNALIB_FN(3, system_net, network_disconnect, void(network_handle_t, uint32_t, void*))
DYNALIB_FN(4, system_net, network_ready, bool(network_handle_t, uint32_t, void*))
 80a0428:	b508      	push	{r3, lr}
 80a042a:	4b02      	ldr	r3, [pc, #8]	; (80a0434 <network_ready+0xc>)
 80a042c:	681b      	ldr	r3, [r3, #0]
 80a042e:	691b      	ldr	r3, [r3, #16]
 80a0430:	9301      	str	r3, [sp, #4]
 80a0432:	bd08      	pop	{r3, pc}
 80a0434:	080601c8 	.word	0x080601c8

080a0438 <free>:
#include "dynalib.h"

DYNALIB_BEGIN(rt)

DYNALIB_FN(0, rt, malloc, void*(size_t))
DYNALIB_FN(1, rt, free, void(void*))
 80a0438:	b508      	push	{r3, lr}
 80a043a:	4b02      	ldr	r3, [pc, #8]	; (80a0444 <free+0xc>)
 80a043c:	681b      	ldr	r3, [r3, #0]
 80a043e:	685b      	ldr	r3, [r3, #4]
 80a0440:	9301      	str	r3, [sp, #4]
 80a0442:	bd08      	pop	{r3, pc}
 80a0444:	080601a0 	.word	0x080601a0

080a0448 <realloc>:
DYNALIB_FN(2, rt, realloc, void*(void*, size_t))
 80a0448:	b508      	push	{r3, lr}
 80a044a:	4b02      	ldr	r3, [pc, #8]	; (80a0454 <realloc+0xc>)
 80a044c:	681b      	ldr	r3, [r3, #0]
 80a044e:	689b      	ldr	r3, [r3, #8]
 80a0450:	9301      	str	r3, [sp, #4]
 80a0452:	bd08      	pop	{r3, pc}
 80a0454:	080601a0 	.word	0x080601a0

080a0458 <delay>:
  return (value - fromStart) * (toEnd - toStart) / (fromEnd - fromStart) + toStart;
}

void delay(unsigned long ms)
{
    system_delay_ms(ms, false);
 80a0458:	2100      	movs	r1, #0
 80a045a:	f7ff bfd5 	b.w	80a0408 <system_delay_ms>
	...

080a0460 <_GLOBAL__sub_I_setADCSampleTime>:
{
public:
    typedef uint8_t flag_t;
    inline SleepNetworkFlag(SystemSleepNetwork f) : SleepNetworkFlag(static_cast<flag_t>(f)) {}

    inline SleepNetworkFlag(flag_t flag) : flag_(flag) {}
 80a0460:	4b06      	ldr	r3, [pc, #24]	; (80a047c <_GLOBAL__sub_I_setADCSampleTime+0x1c>)
 80a0462:	2200      	movs	r2, #0
 80a0464:	4906      	ldr	r1, [pc, #24]	; (80a0480 <_GLOBAL__sub_I_setADCSampleTime+0x20>)
 80a0466:	701a      	strb	r2, [r3, #0]
 80a0468:	2301      	movs	r3, #1
 80a046a:	700b      	strb	r3, [r1, #0]

class PublishFlag
{
public:
	typedef uint8_t flag_t;
	PublishFlag(flag_t flag) : flag_(flag) {}
 80a046c:	4905      	ldr	r1, [pc, #20]	; (80a0484 <_GLOBAL__sub_I_setADCSampleTime+0x24>)
 80a046e:	700a      	strb	r2, [r1, #0]
 80a0470:	4a05      	ldr	r2, [pc, #20]	; (80a0488 <_GLOBAL__sub_I_setADCSampleTime+0x28>)
 80a0472:	7013      	strb	r3, [r2, #0]
 80a0474:	4b05      	ldr	r3, [pc, #20]	; (80a048c <_GLOBAL__sub_I_setADCSampleTime+0x2c>)
 80a0476:	2202      	movs	r2, #2
 80a0478:	701a      	strb	r2, [r3, #0]
 80a047a:	4770      	bx	lr
 80a047c:	20000314 	.word	0x20000314
 80a0480:	20000315 	.word	0x20000315
 80a0484:	20000312 	.word	0x20000312
 80a0488:	20000313 	.word	0x20000313
 80a048c:	20000311 	.word	0x20000311

080a0490 <_GLOBAL__sub_I__ZN10CANChannelC2E15HAL_CAN_Channeltt>:
 80a0490:	4b06      	ldr	r3, [pc, #24]	; (80a04ac <_GLOBAL__sub_I__ZN10CANChannelC2E15HAL_CAN_Channeltt+0x1c>)
 80a0492:	2200      	movs	r2, #0
 80a0494:	4906      	ldr	r1, [pc, #24]	; (80a04b0 <_GLOBAL__sub_I__ZN10CANChannelC2E15HAL_CAN_Channeltt+0x20>)
 80a0496:	701a      	strb	r2, [r3, #0]
 80a0498:	2301      	movs	r3, #1
 80a049a:	700b      	strb	r3, [r1, #0]
 80a049c:	4905      	ldr	r1, [pc, #20]	; (80a04b4 <_GLOBAL__sub_I__ZN10CANChannelC2E15HAL_CAN_Channeltt+0x24>)
 80a049e:	700a      	strb	r2, [r1, #0]
 80a04a0:	4a05      	ldr	r2, [pc, #20]	; (80a04b8 <_GLOBAL__sub_I__ZN10CANChannelC2E15HAL_CAN_Channeltt+0x28>)
 80a04a2:	7013      	strb	r3, [r2, #0]
 80a04a4:	4b05      	ldr	r3, [pc, #20]	; (80a04bc <_GLOBAL__sub_I__ZN10CANChannelC2E15HAL_CAN_Channeltt+0x2c>)
 80a04a6:	2202      	movs	r2, #2
 80a04a8:	701a      	strb	r2, [r3, #0]
 80a04aa:	4770      	bx	lr
 80a04ac:	20000319 	.word	0x20000319
 80a04b0:	2000031a 	.word	0x2000031a
 80a04b4:	20000317 	.word	0x20000317
 80a04b8:	20000318 	.word	0x20000318
 80a04bc:	20000316 	.word	0x20000316

080a04c0 <_ZN10CloudClass22call_raw_user_functionEPvPKcS0_>:
#include "spark_wiring_cloud.h"

int CloudClass::call_raw_user_function(void* data, const char* param, void* reserved)
{
 80a04c0:	b510      	push	{r4, lr}
 80a04c2:	b088      	sub	sp, #32
 80a04c4:	4604      	mov	r4, r0
    user_function_int_str_t* fn = (user_function_int_str_t*)(data);
    String p(param);
 80a04c6:	4668      	mov	r0, sp
 80a04c8:	f000 f9d6 	bl	80a0878 <_ZN6StringC1EPKc>
    return (*fn)(p);
 80a04cc:	4669      	mov	r1, sp
 80a04ce:	a804      	add	r0, sp, #16
 80a04d0:	f000 f9f4 	bl	80a08bc <_ZN6StringC1ERKS_>
 80a04d4:	a804      	add	r0, sp, #16
 80a04d6:	47a0      	blx	r4
 80a04d8:	4604      	mov	r4, r0
 80a04da:	a804      	add	r0, sp, #16
 80a04dc:	f000 f98a 	bl	80a07f4 <_ZN6StringD1Ev>
 80a04e0:	4668      	mov	r0, sp
 80a04e2:	f000 f987 	bl	80a07f4 <_ZN6StringD1Ev>
}
 80a04e6:	4620      	mov	r0, r4
 80a04e8:	b008      	add	sp, #32
 80a04ea:	bd10      	pop	{r4, pc}

080a04ec <_ZN10CloudClass17register_functionEPFiPvPKcS0_ES0_S2_>:
    wiring_event_handler_t* fn = (wiring_event_handler_t*)(handler_data);
    (*fn)(event_name, data);
}

bool CloudClass::register_function(cloud_function_t fn, void* data, const char* funcKey)
{
 80a04ec:	b5f0      	push	{r4, r5, r6, r7, lr}
 80a04ee:	4607      	mov	r7, r0
 80a04f0:	460e      	mov	r6, r1
 80a04f2:	4615      	mov	r5, r2
 80a04f4:	b085      	sub	sp, #20
    const char *funcKey;
    cloud_function_t fn;
    void* data;

     cloud_function_descriptor() {
         memset(this, 0, sizeof(*this));
 80a04f6:	2410      	movs	r4, #16
 80a04f8:	4622      	mov	r2, r4
 80a04fa:	4668      	mov	r0, sp
 80a04fc:	2100      	movs	r1, #0
 80a04fe:	f000 fd44 	bl	80a0f8a <memset>
    cloud_function_descriptor desc;
    memset(&desc, 0, sizeof(desc));
 80a0502:	4622      	mov	r2, r4
 80a0504:	4668      	mov	r0, sp
 80a0506:	2100      	movs	r1, #0
 80a0508:	f000 fd3f 	bl	80a0f8a <memset>
    desc.size = sizeof(desc);
    desc.fn = fn;
    desc.data = (void*)data;
    desc.funcKey = funcKey;
    return spark_function(NULL, (user_function_int_str_t*)&desc, NULL);
 80a050c:	2000      	movs	r0, #0
 80a050e:	4669      	mov	r1, sp
 80a0510:	4602      	mov	r2, r0

bool CloudClass::register_function(cloud_function_t fn, void* data, const char* funcKey)
{
    cloud_function_descriptor desc;
    memset(&desc, 0, sizeof(desc));
    desc.size = sizeof(desc);
 80a0512:	f8ad 4000 	strh.w	r4, [sp]
    desc.fn = fn;
 80a0516:	9702      	str	r7, [sp, #8]
    desc.data = (void*)data;
 80a0518:	9603      	str	r6, [sp, #12]
    desc.funcKey = funcKey;
 80a051a:	9501      	str	r5, [sp, #4]
    return spark_function(NULL, (user_function_int_str_t*)&desc, NULL);
 80a051c:	f7ff ff7c 	bl	80a0418 <spark_function>
}
 80a0520:	b005      	add	sp, #20
 80a0522:	bdf0      	pop	{r4, r5, r6, r7, pc}

080a0524 <_GLOBAL__sub_I__ZN10CloudClass22call_raw_user_functionEPvPKcS0_>:
 80a0524:	4b06      	ldr	r3, [pc, #24]	; (80a0540 <_GLOBAL__sub_I__ZN10CloudClass22call_raw_user_functionEPvPKcS0_+0x1c>)
 80a0526:	2200      	movs	r2, #0
 80a0528:	4906      	ldr	r1, [pc, #24]	; (80a0544 <_GLOBAL__sub_I__ZN10CloudClass22call_raw_user_functionEPvPKcS0_+0x20>)
 80a052a:	701a      	strb	r2, [r3, #0]
 80a052c:	2301      	movs	r3, #1
 80a052e:	700b      	strb	r3, [r1, #0]
 80a0530:	4905      	ldr	r1, [pc, #20]	; (80a0548 <_GLOBAL__sub_I__ZN10CloudClass22call_raw_user_functionEPvPKcS0_+0x24>)
 80a0532:	700a      	strb	r2, [r1, #0]
 80a0534:	4a05      	ldr	r2, [pc, #20]	; (80a054c <_GLOBAL__sub_I__ZN10CloudClass22call_raw_user_functionEPvPKcS0_+0x28>)
 80a0536:	7013      	strb	r3, [r2, #0]
 80a0538:	4b05      	ldr	r3, [pc, #20]	; (80a0550 <_GLOBAL__sub_I__ZN10CloudClass22call_raw_user_functionEPvPKcS0_+0x2c>)
 80a053a:	2202      	movs	r2, #2
 80a053c:	701a      	strb	r2, [r3, #0]
 80a053e:	4770      	bx	lr
 80a0540:	2000031e 	.word	0x2000031e
 80a0544:	2000031f 	.word	0x2000031f
 80a0548:	2000031c 	.word	0x2000031c
 80a054c:	2000031d 	.word	0x2000031d
 80a0550:	2000031b 	.word	0x2000031b

080a0554 <_GLOBAL__sub_I__ZN9FuelGaugeC2Ev>:
 80a0554:	4b06      	ldr	r3, [pc, #24]	; (80a0570 <_GLOBAL__sub_I__ZN9FuelGaugeC2Ev+0x1c>)
 80a0556:	2200      	movs	r2, #0
 80a0558:	4906      	ldr	r1, [pc, #24]	; (80a0574 <_GLOBAL__sub_I__ZN9FuelGaugeC2Ev+0x20>)
 80a055a:	701a      	strb	r2, [r3, #0]
 80a055c:	2301      	movs	r3, #1
 80a055e:	700b      	strb	r3, [r1, #0]
 80a0560:	4905      	ldr	r1, [pc, #20]	; (80a0578 <_GLOBAL__sub_I__ZN9FuelGaugeC2Ev+0x24>)
 80a0562:	700a      	strb	r2, [r1, #0]
 80a0564:	4a05      	ldr	r2, [pc, #20]	; (80a057c <_GLOBAL__sub_I__ZN9FuelGaugeC2Ev+0x28>)
 80a0566:	7013      	strb	r3, [r2, #0]
 80a0568:	4b05      	ldr	r3, [pc, #20]	; (80a0580 <_GLOBAL__sub_I__ZN9FuelGaugeC2Ev+0x2c>)
 80a056a:	2202      	movs	r2, #2
 80a056c:	701a      	strb	r2, [r3, #0]
 80a056e:	4770      	bx	lr
 80a0570:	20000323 	.word	0x20000323
 80a0574:	20000324 	.word	0x20000324
 80a0578:	20000321 	.word	0x20000321
 80a057c:	20000322 	.word	0x20000322
 80a0580:	20000320 	.word	0x20000320

080a0584 <_GLOBAL__sub_I__Z16allocate_handlertRSt8functionIFvvEE>:
 80a0584:	4b06      	ldr	r3, [pc, #24]	; (80a05a0 <_GLOBAL__sub_I__Z16allocate_handlertRSt8functionIFvvEE+0x1c>)
 80a0586:	2200      	movs	r2, #0
 80a0588:	4906      	ldr	r1, [pc, #24]	; (80a05a4 <_GLOBAL__sub_I__Z16allocate_handlertRSt8functionIFvvEE+0x20>)
 80a058a:	701a      	strb	r2, [r3, #0]
 80a058c:	2301      	movs	r3, #1
 80a058e:	700b      	strb	r3, [r1, #0]
 80a0590:	4905      	ldr	r1, [pc, #20]	; (80a05a8 <_GLOBAL__sub_I__Z16allocate_handlertRSt8functionIFvvEE+0x24>)
 80a0592:	700a      	strb	r2, [r1, #0]
 80a0594:	4a05      	ldr	r2, [pc, #20]	; (80a05ac <_GLOBAL__sub_I__Z16allocate_handlertRSt8functionIFvvEE+0x28>)
 80a0596:	7013      	strb	r3, [r2, #0]
 80a0598:	4b05      	ldr	r3, [pc, #20]	; (80a05b0 <_GLOBAL__sub_I__Z16allocate_handlertRSt8functionIFvvEE+0x2c>)
 80a059a:	2202      	movs	r2, #2
 80a059c:	701a      	strb	r2, [r3, #0]
 80a059e:	4770      	bx	lr
 80a05a0:	20000328 	.word	0x20000328
 80a05a4:	20000329 	.word	0x20000329
 80a05a8:	20000326 	.word	0x20000326
 80a05ac:	20000327 	.word	0x20000327
 80a05b0:	20000325 	.word	0x20000325

080a05b4 <_ZN9IPAddressD1Ev>:
    IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet);
    IPAddress(uint32_t address);
    IPAddress(const uint8_t* address);
    IPAddress(const HAL_IPAddress& address);

    virtual ~IPAddress() {}
 80a05b4:	4770      	bx	lr

080a05b6 <_ZN9IPAddressD0Ev>:
 80a05b6:	b510      	push	{r4, lr}
 80a05b8:	4604      	mov	r4, r0
 80a05ba:	f7ff fd6e 	bl	80a009a <_ZdlPv>
 80a05be:	4620      	mov	r0, r4
 80a05c0:	bd10      	pop	{r4, pc}

080a05c2 <_ZNK9IPAddress7printToER5Print>:
#endif
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
 80a05c2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80a05c4:	460f      	mov	r7, r1
 80a05c6:	f100 0608 	add.w	r6, r0, #8
 80a05ca:	1d05      	adds	r5, r0, #4
 80a05cc:	2400      	movs	r4, #0
    size_t n = 0;
    for (int i = 0; i < 4; i++)
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
 80a05ce:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80a05d2:	4638      	mov	r0, r7
 80a05d4:	220a      	movs	r2, #10
 80a05d6:	f000 f8ac 	bl	80a0732 <_ZN5Print5printEhi>
}

size_t IPAddress::printTo(Print& p) const
{
    size_t n = 0;
    for (int i = 0; i < 4; i++)
 80a05da:	42ae      	cmp	r6, r5
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
 80a05dc:	4404      	add	r4, r0
}

size_t IPAddress::printTo(Print& p) const
{
    size_t n = 0;
    for (int i = 0; i < 4; i++)
 80a05de:	d007      	beq.n	80a05f0 <_ZNK9IPAddress7printToER5Print+0x2e>
    {
        if (n)
 80a05e0:	2c00      	cmp	r4, #0
 80a05e2:	d0f4      	beq.n	80a05ce <_ZNK9IPAddress7printToER5Print+0xc>
            n += p.print('.');
 80a05e4:	4638      	mov	r0, r7
 80a05e6:	212e      	movs	r1, #46	; 0x2e
 80a05e8:	f000 f85e 	bl	80a06a8 <_ZN5Print5printEc>
 80a05ec:	4404      	add	r4, r0
 80a05ee:	e7ee      	b.n	80a05ce <_ZNK9IPAddress7printToER5Print+0xc>
        n += p.print((*this)[i], DEC);
    }
    return n;
}
 80a05f0:	4620      	mov	r0, r4
 80a05f2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080a05f4 <_ZN9IPAddress8set_ipv4Ehhhh>:
    return address.ipv4!=0;
#endif
}

void IPAddress::set_ipv4(uint8_t b0, uint8_t b1, uint8_t b2, uint8_t b3)
{
 80a05f4:	b510      	push	{r4, lr}
 80a05f6:	f89d 4008 	ldrb.w	r4, [sp, #8]
 80a05fa:	ea44 2303 	orr.w	r3, r4, r3, lsl #8
 80a05fe:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
    address.ipv4 = b0<<24 | b1 << 16 | b2 << 8 | b3;
 80a0602:	ea42 6101 	orr.w	r1, r2, r1, lsl #24
        return &address;
    }

    inline void setVersion(uint8_t version) {
#if HAL_IPv6
        address.v = version;
 80a0606:	2304      	movs	r3, #4
 80a0608:	6041      	str	r1, [r0, #4]
 80a060a:	7503      	strb	r3, [r0, #20]
 80a060c:	bd10      	pop	{r4, pc}
	...

080a0610 <_ZN9IPAddressC1Ehhhh>:
{
    memcpy(&this->address, &address, sizeof(address));
}


IPAddress::IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet)
 80a0610:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80a0612:	4604      	mov	r4, r0
 80a0614:	4d04      	ldr	r5, [pc, #16]	; (80a0628 <_ZN9IPAddressC1Ehhhh+0x18>)
 80a0616:	6005      	str	r5, [r0, #0]
{
    set_ipv4(first_octet, second_octet, third_octet, fourth_octet);
 80a0618:	f89d 5018 	ldrb.w	r5, [sp, #24]
 80a061c:	9500      	str	r5, [sp, #0]
 80a061e:	f7ff ffe9 	bl	80a05f4 <_ZN9IPAddress8set_ipv4Ehhhh>
}
 80a0622:	4620      	mov	r0, r4
 80a0624:	b003      	add	sp, #12
 80a0626:	bd30      	pop	{r4, r5, pc}
 80a0628:	080a0ff0 	.word	0x080a0ff0

080a062c <_GLOBAL__sub_I__ZN4PMICC2Ev>:
 80a062c:	4b06      	ldr	r3, [pc, #24]	; (80a0648 <_GLOBAL__sub_I__ZN4PMICC2Ev+0x1c>)
 80a062e:	2200      	movs	r2, #0
 80a0630:	4906      	ldr	r1, [pc, #24]	; (80a064c <_GLOBAL__sub_I__ZN4PMICC2Ev+0x20>)
 80a0632:	701a      	strb	r2, [r3, #0]
 80a0634:	2301      	movs	r3, #1
 80a0636:	700b      	strb	r3, [r1, #0]
 80a0638:	4905      	ldr	r1, [pc, #20]	; (80a0650 <_GLOBAL__sub_I__ZN4PMICC2Ev+0x24>)
 80a063a:	700a      	strb	r2, [r1, #0]
 80a063c:	4a05      	ldr	r2, [pc, #20]	; (80a0654 <_GLOBAL__sub_I__ZN4PMICC2Ev+0x28>)
 80a063e:	7013      	strb	r3, [r2, #0]
 80a0640:	4b05      	ldr	r3, [pc, #20]	; (80a0658 <_GLOBAL__sub_I__ZN4PMICC2Ev+0x2c>)
 80a0642:	2202      	movs	r2, #2
 80a0644:	701a      	strb	r2, [r3, #0]
 80a0646:	4770      	bx	lr
 80a0648:	2000032d 	.word	0x2000032d
 80a064c:	2000032e 	.word	0x2000032e
 80a0650:	2000032b 	.word	0x2000032b
 80a0654:	2000032c 	.word	0x2000032c
 80a0658:	2000032a 	.word	0x2000032a

080a065c <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
 80a065c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80a065e:	4606      	mov	r6, r0
 80a0660:	460d      	mov	r5, r1
 80a0662:	188f      	adds	r7, r1, r2
  size_t n = 0;
 80a0664:	2400      	movs	r4, #0
  while (size--) {
 80a0666:	42bd      	cmp	r5, r7
 80a0668:	d00c      	beq.n	80a0684 <_ZN5Print5writeEPKhj+0x28>
     int chunk = write(*buffer++);
 80a066a:	6833      	ldr	r3, [r6, #0]
 80a066c:	4630      	mov	r0, r6
 80a066e:	689b      	ldr	r3, [r3, #8]
 80a0670:	f815 1b01 	ldrb.w	r1, [r5], #1
 80a0674:	4798      	blx	r3
     if (chunk>=0)
 80a0676:	2800      	cmp	r0, #0
 80a0678:	db01      	blt.n	80a067e <_ZN5Print5writeEPKhj+0x22>
         n += chunk;
 80a067a:	4404      	add	r4, r0
 80a067c:	e7f3      	b.n	80a0666 <_ZN5Print5writeEPKhj+0xa>
/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
  size_t n = 0;
  while (size--) {
     int chunk = write(*buffer++);
 80a067e:	2c00      	cmp	r4, #0
 80a0680:	bf08      	it	eq
 80a0682:	4604      	moveq	r4, r0
             n = chunk;
         break;
     }
  }
  return n;
}
 80a0684:	4620      	mov	r0, r4
 80a0686:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080a0688 <_ZN5Print5writeEPKc>:

    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
 80a0688:	b570      	push	{r4, r5, r6, lr}
 80a068a:	4605      	mov	r5, r0
      if (str == NULL) return 0;
 80a068c:	460c      	mov	r4, r1
      return write((const uint8_t *)str, strlen(str));
    }
 80a068e:	4608      	mov	r0, r1
    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
 80a0690:	b149      	cbz	r1, 80a06a6 <_ZN5Print5writeEPKc+0x1e>
      return write((const uint8_t *)str, strlen(str));
 80a0692:	f000 fc8a 	bl	80a0faa <strlen>
 80a0696:	682b      	ldr	r3, [r5, #0]
 80a0698:	4602      	mov	r2, r0
 80a069a:	4621      	mov	r1, r4
 80a069c:	4628      	mov	r0, r5
    }
 80a069e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
      return write((const uint8_t *)str, strlen(str));
 80a06a2:	68db      	ldr	r3, [r3, #12]
 80a06a4:	4718      	bx	r3
    }
 80a06a6:	bd70      	pop	{r4, r5, r6, pc}

080a06a8 <_ZN5Print5printEc>:
  return write(str);
}

size_t Print::print(char c)
{
  return write(c);
 80a06a8:	6803      	ldr	r3, [r0, #0]
 80a06aa:	689b      	ldr	r3, [r3, #8]
 80a06ac:	4718      	bx	r3

080a06ae <_ZN5Print7printlnEv>:
 {
   return x.printTo(*this);
 }

size_t Print::println(void)
{
 80a06ae:	b538      	push	{r3, r4, r5, lr}
  size_t n = print('\r');
 80a06b0:	210d      	movs	r1, #13
 {
   return x.printTo(*this);
 }

size_t Print::println(void)
{
 80a06b2:	4605      	mov	r5, r0
  size_t n = print('\r');
 80a06b4:	f7ff fff8 	bl	80a06a8 <_ZN5Print5printEc>
  n += print('\n');
 80a06b8:	210a      	movs	r1, #10
   return x.printTo(*this);
 }

size_t Print::println(void)
{
  size_t n = print('\r');
 80a06ba:	4604      	mov	r4, r0
  n += print('\n');
 80a06bc:	4628      	mov	r0, r5
 80a06be:	f7ff fff3 	bl	80a06a8 <_ZN5Print5printEc>
  return n;
}
 80a06c2:	4420      	add	r0, r4
 80a06c4:	bd38      	pop	{r3, r4, r5, pc}

080a06c6 <_ZN5Print7printlnEPKc>:

size_t Print::println(const char c[])
{
 80a06c6:	b538      	push	{r3, r4, r5, lr}
 80a06c8:	4605      	mov	r5, r0
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
 80a06ca:	f7ff ffdd 	bl	80a0688 <_ZN5Print5writeEPKc>
 80a06ce:	4604      	mov	r4, r0
}

size_t Print::println(const char c[])
{
  size_t n = print(c);
  n += println();
 80a06d0:	4628      	mov	r0, r5
 80a06d2:	f7ff ffec 	bl	80a06ae <_ZN5Print7printlnEv>
  return n;
}
 80a06d6:	4420      	add	r0, r4
 80a06d8:	bd38      	pop	{r3, r4, r5, pc}

080a06da <_ZN5Print11printNumberEmh>:
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
 80a06da:	2a01      	cmp	r2, #1
 80a06dc:	bf98      	it	ls
 80a06de:	220a      	movls	r2, #10
   return n;
 }

// Private Methods /////////////////////////////////////////////////////////////

size_t Print::printNumber(unsigned long n, uint8_t base) {
 80a06e0:	b530      	push	{r4, r5, lr}
 80a06e2:	460b      	mov	r3, r1
 80a06e4:	b08b      	sub	sp, #44	; 0x2c
  char buf[8 * sizeof(long) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
 80a06e6:	2100      	movs	r1, #0
 80a06e8:	f88d 1024 	strb.w	r1, [sp, #36]	; 0x24
 80a06ec:	f10d 0423 	add.w	r4, sp, #35	; 0x23
  // prevent crash if called with base == 1
  if (base < 2) base = 10;

  do {
    unsigned long m = n;
    n /= base;
 80a06f0:	fbb3 f5f2 	udiv	r5, r3, r2
    char c = m - base * n;
 80a06f4:	fb05 3312 	mls	r3, r5, r2, r3
 80a06f8:	b2db      	uxtb	r3, r3
    *--str = c < 10 ? c + '0' : c + 'A' - 10;
 80a06fa:	2b09      	cmp	r3, #9
 80a06fc:	bf94      	ite	ls
 80a06fe:	3330      	addls	r3, #48	; 0x30
 80a0700:	3337      	addhi	r3, #55	; 0x37
 80a0702:	b2db      	uxtb	r3, r3
 80a0704:	4621      	mov	r1, r4
 80a0706:	f804 3901 	strb.w	r3, [r4], #-1
 80a070a:	462b      	mov	r3, r5
  *str = '\0';

  // prevent crash if called with base == 1
  if (base < 2) base = 10;

  do {
 80a070c:	2d00      	cmp	r5, #0
 80a070e:	d1ef      	bne.n	80a06f0 <_ZN5Print11printNumberEmh+0x16>
    n /= base;
    char c = m - base * n;
    *--str = c < 10 ? c + '0' : c + 'A' - 10;
  } while(n);

  return write(str);
 80a0710:	f7ff ffba 	bl	80a0688 <_ZN5Print5writeEPKc>
}
 80a0714:	b00b      	add	sp, #44	; 0x2c
 80a0716:	bd30      	pop	{r4, r5, pc}

080a0718 <_ZN5Print5printEmi>:
    return printNumber(n, base);
  }
}

size_t Print::print(unsigned long n, int base)
{
 80a0718:	b510      	push	{r4, lr}
  if (base == 0) return write(n);
 80a071a:	b92a      	cbnz	r2, 80a0728 <_ZN5Print5printEmi+0x10>
  else return printNumber(n, base);
}
 80a071c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  }
}

size_t Print::print(unsigned long n, int base)
{
  if (base == 0) return write(n);
 80a0720:	6803      	ldr	r3, [r0, #0]
 80a0722:	b2c9      	uxtb	r1, r1
 80a0724:	689b      	ldr	r3, [r3, #8]
 80a0726:	4718      	bx	r3
  else return printNumber(n, base);
 80a0728:	b2d2      	uxtb	r2, r2
}
 80a072a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
}

size_t Print::print(unsigned long n, int base)
{
  if (base == 0) return write(n);
  else return printNumber(n, base);
 80a072e:	f7ff bfd4 	b.w	80a06da <_ZN5Print11printNumberEmh>

080a0732 <_ZN5Print5printEhi>:
  return write(c);
}

size_t Print::print(unsigned char b, int base)
{
  return print((unsigned long) b, base);
 80a0732:	f7ff bff1 	b.w	80a0718 <_ZN5Print5printEmi>
	...

080a0738 <_GLOBAL__sub_I__ZN5ServoC2Ev>:
 80a0738:	4b06      	ldr	r3, [pc, #24]	; (80a0754 <_GLOBAL__sub_I__ZN5ServoC2Ev+0x1c>)
 80a073a:	2200      	movs	r2, #0
 80a073c:	4906      	ldr	r1, [pc, #24]	; (80a0758 <_GLOBAL__sub_I__ZN5ServoC2Ev+0x20>)
 80a073e:	701a      	strb	r2, [r3, #0]
 80a0740:	2301      	movs	r3, #1
 80a0742:	700b      	strb	r3, [r1, #0]
 80a0744:	4905      	ldr	r1, [pc, #20]	; (80a075c <_GLOBAL__sub_I__ZN5ServoC2Ev+0x24>)
 80a0746:	700a      	strb	r2, [r1, #0]
 80a0748:	4a05      	ldr	r2, [pc, #20]	; (80a0760 <_GLOBAL__sub_I__ZN5ServoC2Ev+0x28>)
 80a074a:	7013      	strb	r3, [r2, #0]
 80a074c:	4b05      	ldr	r3, [pc, #20]	; (80a0764 <_GLOBAL__sub_I__ZN5ServoC2Ev+0x2c>)
 80a074e:	2202      	movs	r2, #2
 80a0750:	701a      	strb	r2, [r3, #0]
 80a0752:	4770      	bx	lr
 80a0754:	20000332 	.word	0x20000332
 80a0758:	20000333 	.word	0x20000333
 80a075c:	20000330 	.word	0x20000330
 80a0760:	20000331 	.word	0x20000331
 80a0764:	2000032f 	.word	0x2000032f

080a0768 <_ZN8SPIClassD1Ev>:
   */
  unsigned dividerReference;

public:
  SPIClass(HAL_SPI_Interface spi);
  virtual ~SPIClass() {};
 80a0768:	4770      	bx	lr

080a076a <_ZN8SPIClassD0Ev>:
 80a076a:	b510      	push	{r4, lr}
 80a076c:	4604      	mov	r4, r0
 80a076e:	f7ff fc94 	bl	80a009a <_ZdlPv>
 80a0772:	4620      	mov	r0, r4
 80a0774:	bd10      	pop	{r4, pc}
	...

080a0778 <_ZN8SPIClassC1E17HAL_SPI_Interface>:

#include "spark_wiring_spi.h"
#include "core_hal.h"
#include "spark_macros.h"

SPIClass::SPIClass(HAL_SPI_Interface spi)
 80a0778:	b510      	push	{r4, lr}
 80a077a:	4604      	mov	r4, r0
 80a077c:	4b04      	ldr	r3, [pc, #16]	; (80a0790 <_ZN8SPIClassC1E17HAL_SPI_Interface+0x18>)
{
  _spi = spi;
 80a077e:	7101      	strb	r1, [r0, #4]

#include "spark_wiring_spi.h"
#include "core_hal.h"
#include "spark_macros.h"

SPIClass::SPIClass(HAL_SPI_Interface spi)
 80a0780:	6003      	str	r3, [r0, #0]
{
  _spi = spi;
  HAL_SPI_Init(_spi);
 80a0782:	4608      	mov	r0, r1
 80a0784:	f7ff fdc0 	bl	80a0308 <HAL_SPI_Init>
  dividerReference = SPI_CLK_SYSTEM;     // 0 indicates the system clock
 80a0788:	2300      	movs	r3, #0
 80a078a:	60a3      	str	r3, [r4, #8]
}
 80a078c:	4620      	mov	r0, r4
 80a078e:	bd10      	pop	{r4, pc}
 80a0790:	080a1008 	.word	0x080a1008

080a0794 <_GLOBAL__sub_I__ZN8SPIClassC2E17HAL_SPI_Interface>:
 80a0794:	4b06      	ldr	r3, [pc, #24]	; (80a07b0 <_GLOBAL__sub_I__ZN8SPIClassC2E17HAL_SPI_Interface+0x1c>)
 80a0796:	2200      	movs	r2, #0
 80a0798:	4906      	ldr	r1, [pc, #24]	; (80a07b4 <_GLOBAL__sub_I__ZN8SPIClassC2E17HAL_SPI_Interface+0x20>)
 80a079a:	701a      	strb	r2, [r3, #0]
 80a079c:	2301      	movs	r3, #1
 80a079e:	700b      	strb	r3, [r1, #0]
 80a07a0:	4905      	ldr	r1, [pc, #20]	; (80a07b8 <_GLOBAL__sub_I__ZN8SPIClassC2E17HAL_SPI_Interface+0x24>)
 80a07a2:	700a      	strb	r2, [r1, #0]
 80a07a4:	4a05      	ldr	r2, [pc, #20]	; (80a07bc <_GLOBAL__sub_I__ZN8SPIClassC2E17HAL_SPI_Interface+0x28>)
 80a07a6:	7013      	strb	r3, [r2, #0]
 80a07a8:	4b05      	ldr	r3, [pc, #20]	; (80a07c0 <_GLOBAL__sub_I__ZN8SPIClassC2E17HAL_SPI_Interface+0x2c>)
 80a07aa:	2202      	movs	r2, #2
 80a07ac:	701a      	strb	r2, [r3, #0]
 80a07ae:	4770      	bx	lr
 80a07b0:	20000337 	.word	0x20000337
 80a07b4:	20000338 	.word	0x20000338
 80a07b8:	20000335 	.word	0x20000335
 80a07bc:	20000336 	.word	0x20000336
 80a07c0:	20000334 	.word	0x20000334

080a07c4 <_GLOBAL__sub_I__ZN6Stream9timedReadEv>:
 80a07c4:	4b06      	ldr	r3, [pc, #24]	; (80a07e0 <_GLOBAL__sub_I__ZN6Stream9timedReadEv+0x1c>)
 80a07c6:	2200      	movs	r2, #0
 80a07c8:	4906      	ldr	r1, [pc, #24]	; (80a07e4 <_GLOBAL__sub_I__ZN6Stream9timedReadEv+0x20>)
 80a07ca:	701a      	strb	r2, [r3, #0]
 80a07cc:	2301      	movs	r3, #1
 80a07ce:	700b      	strb	r3, [r1, #0]
 80a07d0:	4905      	ldr	r1, [pc, #20]	; (80a07e8 <_GLOBAL__sub_I__ZN6Stream9timedReadEv+0x24>)
 80a07d2:	700a      	strb	r2, [r1, #0]
 80a07d4:	4a05      	ldr	r2, [pc, #20]	; (80a07ec <_GLOBAL__sub_I__ZN6Stream9timedReadEv+0x28>)
 80a07d6:	7013      	strb	r3, [r2, #0]
 80a07d8:	4b05      	ldr	r3, [pc, #20]	; (80a07f0 <_GLOBAL__sub_I__ZN6Stream9timedReadEv+0x2c>)
 80a07da:	2202      	movs	r2, #2
 80a07dc:	701a      	strb	r2, [r3, #0]
 80a07de:	4770      	bx	lr
 80a07e0:	2000033c 	.word	0x2000033c
 80a07e4:	2000033d 	.word	0x2000033d
 80a07e8:	2000033a 	.word	0x2000033a
 80a07ec:	2000033b 	.word	0x2000033b
 80a07f0:	20000339 	.word	0x20000339

080a07f4 <_ZN6StringD1Ev>:
	init();
	char buf[33];
	dtoa(value, decimalPlaces, buf);
        *this = buf;
}
String::~String()
 80a07f4:	b510      	push	{r4, lr}
 80a07f6:	4604      	mov	r4, r0
{
	free(buffer);
 80a07f8:	6800      	ldr	r0, [r0, #0]
 80a07fa:	f7ff fe1d 	bl	80a0438 <free>
}
 80a07fe:	4620      	mov	r0, r4
 80a0800:	bd10      	pop	{r4, pc}

080a0802 <_ZN6String10invalidateEv>:
	len = 0;
	flags = 0;
}

void String::invalidate(void)
{
 80a0802:	b510      	push	{r4, lr}
 80a0804:	4604      	mov	r4, r0
	if (buffer) free(buffer);
 80a0806:	6800      	ldr	r0, [r0, #0]
 80a0808:	b108      	cbz	r0, 80a080e <_ZN6String10invalidateEv+0xc>
 80a080a:	f7ff fe15 	bl	80a0438 <free>
	buffer = NULL;
 80a080e:	2300      	movs	r3, #0
 80a0810:	6023      	str	r3, [r4, #0]
	capacity = len = 0;
 80a0812:	60a3      	str	r3, [r4, #8]
 80a0814:	6063      	str	r3, [r4, #4]
 80a0816:	bd10      	pop	{r4, pc}

080a0818 <_ZN6String12changeBufferEj>:
	}
	return 0;
}

unsigned char String::changeBuffer(unsigned int maxStrLen)
{
 80a0818:	b538      	push	{r3, r4, r5, lr}
 80a081a:	4604      	mov	r4, r0
 80a081c:	460d      	mov	r5, r1
	char *newbuffer = (char *)realloc(buffer, maxStrLen + 1);
 80a081e:	6800      	ldr	r0, [r0, #0]
 80a0820:	3101      	adds	r1, #1
 80a0822:	f7ff fe11 	bl	80a0448 <realloc>
	if (newbuffer) {
 80a0826:	b110      	cbz	r0, 80a082e <_ZN6String12changeBufferEj+0x16>
		buffer = newbuffer;
		capacity = maxStrLen;
 80a0828:	e884 0021 	stmia.w	r4, {r0, r5}
		return 1;
 80a082c:	2001      	movs	r0, #1
	}
	return 0;
}
 80a082e:	bd38      	pop	{r3, r4, r5, pc}

080a0830 <_ZN6String7reserveEj>:
	buffer = NULL;
	capacity = len = 0;
}

unsigned char String::reserve(unsigned int size)
{
 80a0830:	b510      	push	{r4, lr}
	if (buffer && capacity >= size) return 1;
 80a0832:	6803      	ldr	r3, [r0, #0]
	buffer = NULL;
	capacity = len = 0;
}

unsigned char String::reserve(unsigned int size)
{
 80a0834:	4604      	mov	r4, r0
	if (buffer && capacity >= size) return 1;
 80a0836:	b113      	cbz	r3, 80a083e <_ZN6String7reserveEj+0xe>
 80a0838:	6843      	ldr	r3, [r0, #4]
 80a083a:	428b      	cmp	r3, r1
 80a083c:	d207      	bcs.n	80a084e <_ZN6String7reserveEj+0x1e>
	if (changeBuffer(size)) {
 80a083e:	4620      	mov	r0, r4
 80a0840:	f7ff ffea 	bl	80a0818 <_ZN6String12changeBufferEj>
 80a0844:	b120      	cbz	r0, 80a0850 <_ZN6String7reserveEj+0x20>
		if (len == 0) buffer[0] = 0;
 80a0846:	68a3      	ldr	r3, [r4, #8]
 80a0848:	b90b      	cbnz	r3, 80a084e <_ZN6String7reserveEj+0x1e>
 80a084a:	6822      	ldr	r2, [r4, #0]
 80a084c:	7013      	strb	r3, [r2, #0]
 80a084e:	2001      	movs	r0, #1
		return 1;
	}
	return 0;
}
 80a0850:	bd10      	pop	{r4, pc}

080a0852 <_ZN6String4copyEPKcj>:
/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
 80a0852:	b570      	push	{r4, r5, r6, lr}
 80a0854:	460e      	mov	r6, r1
	if (!reserve(length)) {
 80a0856:	4611      	mov	r1, r2
/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
 80a0858:	4604      	mov	r4, r0
 80a085a:	4615      	mov	r5, r2
	if (!reserve(length)) {
 80a085c:	f7ff ffe8 	bl	80a0830 <_ZN6String7reserveEj>
 80a0860:	b918      	cbnz	r0, 80a086a <_ZN6String4copyEPKcj+0x18>
		invalidate();
 80a0862:	4620      	mov	r0, r4
 80a0864:	f7ff ffcd 	bl	80a0802 <_ZN6String10invalidateEv>
		return *this;
 80a0868:	e004      	b.n	80a0874 <_ZN6String4copyEPKcj+0x22>
	}
	len = length;
 80a086a:	60a5      	str	r5, [r4, #8]
	strcpy(buffer, cstr);
 80a086c:	6820      	ldr	r0, [r4, #0]
 80a086e:	4631      	mov	r1, r6
 80a0870:	f000 fb93 	bl	80a0f9a <strcpy>
	return *this;
}
 80a0874:	4620      	mov	r0, r4
 80a0876:	bd70      	pop	{r4, r5, r6, pc}

080a0878 <_ZN6StringC1EPKc>:

/*********************************************/
/*  Constructors                             */
/*********************************************/

String::String(const char *cstr)
 80a0878:	b538      	push	{r3, r4, r5, lr}
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
 80a087a:	2300      	movs	r3, #0

/*********************************************/
/*  Constructors                             */
/*********************************************/

String::String(const char *cstr)
 80a087c:	4604      	mov	r4, r0
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
 80a087e:	6003      	str	r3, [r0, #0]
	capacity = 0;
 80a0880:	6043      	str	r3, [r0, #4]
	len = 0;
 80a0882:	6083      	str	r3, [r0, #8]
	flags = 0;
 80a0884:	7303      	strb	r3, [r0, #12]
/*********************************************/

String::String(const char *cstr)
{
	init();
	if (cstr) copy(cstr, strlen(cstr));
 80a0886:	460d      	mov	r5, r1
 80a0888:	b139      	cbz	r1, 80a089a <_ZN6StringC1EPKc+0x22>
 80a088a:	4608      	mov	r0, r1
 80a088c:	f000 fb8d 	bl	80a0faa <strlen>
 80a0890:	4629      	mov	r1, r5
 80a0892:	4602      	mov	r2, r0
 80a0894:	4620      	mov	r0, r4
 80a0896:	f7ff ffdc 	bl	80a0852 <_ZN6String4copyEPKcj>
}
 80a089a:	4620      	mov	r0, r4
 80a089c:	bd38      	pop	{r3, r4, r5, pc}

080a089e <_ZN6StringaSERKS_>:
}
#endif

String & String::operator = (const String &rhs)
{
	if (this == &rhs) return *this;
 80a089e:	4288      	cmp	r0, r1
	rhs.len = 0;
}
#endif

String & String::operator = (const String &rhs)
{
 80a08a0:	b510      	push	{r4, lr}
 80a08a2:	460b      	mov	r3, r1
 80a08a4:	4604      	mov	r4, r0
	if (this == &rhs) return *this;
 80a08a6:	d007      	beq.n	80a08b8 <_ZN6StringaSERKS_+0x1a>

	if (rhs.buffer) copy(rhs.buffer, rhs.len);
 80a08a8:	6809      	ldr	r1, [r1, #0]
 80a08aa:	b119      	cbz	r1, 80a08b4 <_ZN6StringaSERKS_+0x16>
 80a08ac:	689a      	ldr	r2, [r3, #8]
 80a08ae:	f7ff ffd0 	bl	80a0852 <_ZN6String4copyEPKcj>
 80a08b2:	e001      	b.n	80a08b8 <_ZN6StringaSERKS_+0x1a>
	else invalidate();
 80a08b4:	f7ff ffa5 	bl	80a0802 <_ZN6String10invalidateEv>

	return *this;
}
 80a08b8:	4620      	mov	r0, r4
 80a08ba:	bd10      	pop	{r4, pc}

080a08bc <_ZN6StringC1ERKS_>:
{
	init();
	if (cstr) copy(cstr, strlen(cstr));
}

String::String(const String &value)
 80a08bc:	b510      	push	{r4, lr}
 80a08be:	4604      	mov	r4, r0
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
 80a08c0:	2300      	movs	r3, #0
 80a08c2:	6003      	str	r3, [r0, #0]
	capacity = 0;
 80a08c4:	6043      	str	r3, [r0, #4]
	len = 0;
 80a08c6:	6083      	str	r3, [r0, #8]
	flags = 0;
 80a08c8:	7303      	strb	r3, [r0, #12]
}

String::String(const String &value)
{
	init();
	*this = value;
 80a08ca:	f7ff ffe8 	bl	80a089e <_ZN6StringaSERKS_>
}
 80a08ce:	4620      	mov	r0, r4
 80a08d0:	bd10      	pop	{r4, pc}

080a08d2 <_ZN6StringaSEPKc>:
	return *this;
}
#endif

String & String::operator = (const char *cstr)
{
 80a08d2:	b538      	push	{r3, r4, r5, lr}
 80a08d4:	4605      	mov	r5, r0
	if (cstr) copy(cstr, strlen(cstr));
 80a08d6:	460c      	mov	r4, r1
 80a08d8:	b141      	cbz	r1, 80a08ec <_ZN6StringaSEPKc+0x1a>
 80a08da:	4608      	mov	r0, r1
 80a08dc:	f000 fb65 	bl	80a0faa <strlen>
 80a08e0:	4621      	mov	r1, r4
 80a08e2:	4602      	mov	r2, r0
 80a08e4:	4628      	mov	r0, r5
 80a08e6:	f7ff ffb4 	bl	80a0852 <_ZN6String4copyEPKcj>
 80a08ea:	e001      	b.n	80a08f0 <_ZN6StringaSEPKc+0x1e>
	else invalidate();
 80a08ec:	f7ff ff89 	bl	80a0802 <_ZN6String10invalidateEv>

	return *this;
}
 80a08f0:	4628      	mov	r0, r5
 80a08f2:	bd38      	pop	{r3, r4, r5, pc}

080a08f4 <_ZN6String6concatEPKcj>:
{
	return concat(s.buffer, s.len);
}

unsigned char String::concat(const char *cstr, unsigned int length)
{
 80a08f4:	b570      	push	{r4, r5, r6, lr}
 80a08f6:	4604      	mov	r4, r0
	unsigned int newlen = len + length;
 80a08f8:	6883      	ldr	r3, [r0, #8]
	if (!cstr) return 0;
 80a08fa:	460e      	mov	r6, r1
 80a08fc:	b909      	cbnz	r1, 80a0902 <_ZN6String6concatEPKcj+0xe>
 80a08fe:	2000      	movs	r0, #0
 80a0900:	bd70      	pop	{r4, r5, r6, pc}
	if (length == 0) return 1;
 80a0902:	b162      	cbz	r2, 80a091e <_ZN6String6concatEPKcj+0x2a>
	return concat(s.buffer, s.len);
}

unsigned char String::concat(const char *cstr, unsigned int length)
{
	unsigned int newlen = len + length;
 80a0904:	18d5      	adds	r5, r2, r3
	if (!cstr) return 0;
	if (length == 0) return 1;
	if (!reserve(newlen)) return 0;
 80a0906:	4629      	mov	r1, r5
 80a0908:	f7ff ff92 	bl	80a0830 <_ZN6String7reserveEj>
 80a090c:	2800      	cmp	r0, #0
 80a090e:	d0f6      	beq.n	80a08fe <_ZN6String6concatEPKcj+0xa>
	strcpy(buffer + len, cstr);
 80a0910:	6820      	ldr	r0, [r4, #0]
 80a0912:	68a3      	ldr	r3, [r4, #8]
 80a0914:	4631      	mov	r1, r6
 80a0916:	4418      	add	r0, r3
 80a0918:	f000 fb3f 	bl	80a0f9a <strcpy>
	len = newlen;
 80a091c:	60a5      	str	r5, [r4, #8]

unsigned char String::concat(const char *cstr, unsigned int length)
{
	unsigned int newlen = len + length;
	if (!cstr) return 0;
	if (length == 0) return 1;
 80a091e:	2001      	movs	r0, #1
	if (!reserve(newlen)) return 0;
	strcpy(buffer + len, cstr);
	len = newlen;
	return 1;
}
 80a0920:	bd70      	pop	{r4, r5, r6, pc}

080a0922 <_ZplRK15StringSumHelperRK6String>:
/*********************************************/
/*  Concatenate                              */
/*********************************************/

StringSumHelper & operator + (const StringSumHelper &lhs, const String &rhs)
{
 80a0922:	460b      	mov	r3, r1
 80a0924:	b510      	push	{r4, lr}
	StringSumHelper &a = const_cast<StringSumHelper&>(lhs);
	if (!a.concat(rhs.buffer, rhs.len)) a.invalidate();
 80a0926:	689a      	ldr	r2, [r3, #8]
 80a0928:	6809      	ldr	r1, [r1, #0]
/*********************************************/
/*  Concatenate                              */
/*********************************************/

StringSumHelper & operator + (const StringSumHelper &lhs, const String &rhs)
{
 80a092a:	4604      	mov	r4, r0
	StringSumHelper &a = const_cast<StringSumHelper&>(lhs);
	if (!a.concat(rhs.buffer, rhs.len)) a.invalidate();
 80a092c:	f7ff ffe2 	bl	80a08f4 <_ZN6String6concatEPKcj>
 80a0930:	b910      	cbnz	r0, 80a0938 <_ZplRK15StringSumHelperRK6String+0x16>
 80a0932:	4620      	mov	r0, r4
 80a0934:	f7ff ff65 	bl	80a0802 <_ZN6String10invalidateEv>
	return a;
}
 80a0938:	4620      	mov	r0, r4
 80a093a:	bd10      	pop	{r4, pc}

080a093c <_ZNK6String9substringEjj>:
{
	return substring(left, len);
}

String String::substring(unsigned int left, unsigned int right) const
{
 80a093c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80a0940:	461c      	mov	r4, r3
	if (left > right) {
 80a0942:	429a      	cmp	r2, r3
 80a0944:	bf88      	it	hi
 80a0946:	4613      	movhi	r3, r2
{
	return substring(left, len);
}

String String::substring(unsigned int left, unsigned int right) const
{
 80a0948:	460e      	mov	r6, r1
 80a094a:	4615      	mov	r5, r2
	if (left > right) {
 80a094c:	bf88      	it	hi
 80a094e:	4625      	movhi	r5, r4
		unsigned int temp = right;
		right = left;
		left = temp;
	}
	String out;
 80a0950:	490d      	ldr	r1, [pc, #52]	; (80a0988 <_ZNK6String9substringEjj+0x4c>)
	return substring(left, len);
}

String String::substring(unsigned int left, unsigned int right) const
{
	if (left > right) {
 80a0952:	bf88      	it	hi
 80a0954:	461c      	movhi	r4, r3
{
	return substring(left, len);
}

String String::substring(unsigned int left, unsigned int right) const
{
 80a0956:	4607      	mov	r7, r0
	if (left > right) {
		unsigned int temp = right;
		right = left;
		left = temp;
	}
	String out;
 80a0958:	f7ff ff8e 	bl	80a0878 <_ZN6StringC1EPKc>
	if (left > len) return out;
 80a095c:	68b1      	ldr	r1, [r6, #8]
 80a095e:	428d      	cmp	r5, r1
 80a0960:	d80f      	bhi.n	80a0982 <_ZNK6String9substringEjj+0x46>
 80a0962:	428c      	cmp	r4, r1
 80a0964:	bf28      	it	cs
 80a0966:	460c      	movcs	r4, r1
	if (right > len) right = len;
	char temp = buffer[right];  // save the replaced character
 80a0968:	6833      	ldr	r3, [r6, #0]
	buffer[right] = '\0';
 80a096a:	2200      	movs	r2, #0
		left = temp;
	}
	String out;
	if (left > len) return out;
	if (right > len) right = len;
	char temp = buffer[right];  // save the replaced character
 80a096c:	f813 8004 	ldrb.w	r8, [r3, r4]
	buffer[right] = '\0';
 80a0970:	551a      	strb	r2, [r3, r4]
	out = buffer + left;  // pointer arithmetic
 80a0972:	6831      	ldr	r1, [r6, #0]
 80a0974:	4638      	mov	r0, r7
 80a0976:	4429      	add	r1, r5
 80a0978:	f7ff ffab 	bl	80a08d2 <_ZN6StringaSEPKc>
	buffer[right] = temp;  //restore character
 80a097c:	6833      	ldr	r3, [r6, #0]
 80a097e:	f803 8004 	strb.w	r8, [r3, r4]
	return out;
}
 80a0982:	4638      	mov	r0, r7
 80a0984:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80a0988:	080a0fdb 	.word	0x080a0fdb

080a098c <_GLOBAL__sub_I_System>:
 80a098c:	4b07      	ldr	r3, [pc, #28]	; (80a09ac <_GLOBAL__sub_I_System+0x20>)
 80a098e:	2000      	movs	r0, #0
 80a0990:	4a07      	ldr	r2, [pc, #28]	; (80a09b0 <_GLOBAL__sub_I_System+0x24>)
 80a0992:	7018      	strb	r0, [r3, #0]
 80a0994:	2301      	movs	r3, #1
 80a0996:	7013      	strb	r3, [r2, #0]
 80a0998:	4a06      	ldr	r2, [pc, #24]	; (80a09b4 <_GLOBAL__sub_I_System+0x28>)
 80a099a:	7010      	strb	r0, [r2, #0]
 80a099c:	4a06      	ldr	r2, [pc, #24]	; (80a09b8 <_GLOBAL__sub_I_System+0x2c>)
 80a099e:	7013      	strb	r3, [r2, #0]
 80a09a0:	4b06      	ldr	r3, [pc, #24]	; (80a09bc <_GLOBAL__sub_I_System+0x30>)
 80a09a2:	2202      	movs	r2, #2
 80a09a4:	701a      	strb	r2, [r3, #0]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
 80a09a6:	f7ff bd27 	b.w	80a03f8 <set_system_mode>
 80a09aa:	bf00      	nop
 80a09ac:	20000341 	.word	0x20000341
 80a09b0:	20000342 	.word	0x20000342
 80a09b4:	2000033f 	.word	0x2000033f
 80a09b8:	20000340 	.word	0x20000340
 80a09bc:	2000033e 	.word	0x2000033e

080a09c0 <_GLOBAL__sub_I__ZN9TCPServerC2Etm>:
{
public:
    typedef uint8_t flag_t;
    inline SleepNetworkFlag(SystemSleepNetwork f) : SleepNetworkFlag(static_cast<flag_t>(f)) {}

    inline SleepNetworkFlag(flag_t flag) : flag_(flag) {}
 80a09c0:	4b06      	ldr	r3, [pc, #24]	; (80a09dc <_GLOBAL__sub_I__ZN9TCPServerC2Etm+0x1c>)
 80a09c2:	2200      	movs	r2, #0
 80a09c4:	4906      	ldr	r1, [pc, #24]	; (80a09e0 <_GLOBAL__sub_I__ZN9TCPServerC2Etm+0x20>)
 80a09c6:	701a      	strb	r2, [r3, #0]
 80a09c8:	2301      	movs	r3, #1
 80a09ca:	700b      	strb	r3, [r1, #0]
 80a09cc:	4905      	ldr	r1, [pc, #20]	; (80a09e4 <_GLOBAL__sub_I__ZN9TCPServerC2Etm+0x24>)
 80a09ce:	700a      	strb	r2, [r1, #0]
 80a09d0:	4a05      	ldr	r2, [pc, #20]	; (80a09e8 <_GLOBAL__sub_I__ZN9TCPServerC2Etm+0x28>)
 80a09d2:	7013      	strb	r3, [r2, #0]
 80a09d4:	4b05      	ldr	r3, [pc, #20]	; (80a09ec <_GLOBAL__sub_I__ZN9TCPServerC2Etm+0x2c>)
 80a09d6:	2202      	movs	r2, #2
 80a09d8:	701a      	strb	r2, [r3, #0]
 80a09da:	4770      	bx	lr
 80a09dc:	20000346 	.word	0x20000346
 80a09e0:	20000347 	.word	0x20000347
 80a09e4:	20000344 	.word	0x20000344
 80a09e8:	20000345 	.word	0x20000345
 80a09ec:	20000343 	.word	0x20000343

080a09f0 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT>:
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
            unix_time_cache = unix_time;
    }
}

const char* TimeClass::format_spec = TIME_FORMAT_DEFAULT;
 80a09f0:	4b02      	ldr	r3, [pc, #8]	; (80a09fc <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0xc>)
 80a09f2:	681a      	ldr	r2, [r3, #0]
 80a09f4:	4b02      	ldr	r3, [pc, #8]	; (80a0a00 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0x10>)
 80a09f6:	601a      	str	r2, [r3, #0]
 80a09f8:	4770      	bx	lr
 80a09fa:	bf00      	nop
 80a09fc:	20000300 	.word	0x20000300
 80a0a00:	20000348 	.word	0x20000348

080a0a04 <_GLOBAL__sub_I_tone>:
 80a0a04:	4b06      	ldr	r3, [pc, #24]	; (80a0a20 <_GLOBAL__sub_I_tone+0x1c>)
 80a0a06:	2200      	movs	r2, #0
 80a0a08:	4906      	ldr	r1, [pc, #24]	; (80a0a24 <_GLOBAL__sub_I_tone+0x20>)
 80a0a0a:	701a      	strb	r2, [r3, #0]
 80a0a0c:	2301      	movs	r3, #1
 80a0a0e:	700b      	strb	r3, [r1, #0]
 80a0a10:	4905      	ldr	r1, [pc, #20]	; (80a0a28 <_GLOBAL__sub_I_tone+0x24>)
 80a0a12:	700a      	strb	r2, [r1, #0]
 80a0a14:	4a05      	ldr	r2, [pc, #20]	; (80a0a2c <_GLOBAL__sub_I_tone+0x28>)
 80a0a16:	7013      	strb	r3, [r2, #0]
 80a0a18:	4b05      	ldr	r3, [pc, #20]	; (80a0a30 <_GLOBAL__sub_I_tone+0x2c>)
 80a0a1a:	2202      	movs	r2, #2
 80a0a1c:	701a      	strb	r2, [r3, #0]
 80a0a1e:	4770      	bx	lr
 80a0a20:	2000034f 	.word	0x2000034f
 80a0a24:	20000350 	.word	0x20000350
 80a0a28:	2000034d 	.word	0x2000034d
 80a0a2c:	2000034e 	.word	0x2000034e
 80a0a30:	2000034c 	.word	0x2000034c

080a0a34 <_GLOBAL__sub_I__ZN3UDPC2Ev>:
 80a0a34:	4b06      	ldr	r3, [pc, #24]	; (80a0a50 <_GLOBAL__sub_I__ZN3UDPC2Ev+0x1c>)
 80a0a36:	2200      	movs	r2, #0
 80a0a38:	4906      	ldr	r1, [pc, #24]	; (80a0a54 <_GLOBAL__sub_I__ZN3UDPC2Ev+0x20>)
 80a0a3a:	701a      	strb	r2, [r3, #0]
 80a0a3c:	2301      	movs	r3, #1
 80a0a3e:	700b      	strb	r3, [r1, #0]
 80a0a40:	4905      	ldr	r1, [pc, #20]	; (80a0a58 <_GLOBAL__sub_I__ZN3UDPC2Ev+0x24>)
 80a0a42:	700a      	strb	r2, [r1, #0]
 80a0a44:	4a05      	ldr	r2, [pc, #20]	; (80a0a5c <_GLOBAL__sub_I__ZN3UDPC2Ev+0x28>)
 80a0a46:	7013      	strb	r3, [r2, #0]
 80a0a48:	4b05      	ldr	r3, [pc, #20]	; (80a0a60 <_GLOBAL__sub_I__ZN3UDPC2Ev+0x2c>)
 80a0a4a:	2202      	movs	r2, #2
 80a0a4c:	701a      	strb	r2, [r3, #0]
 80a0a4e:	4770      	bx	lr
 80a0a50:	20000354 	.word	0x20000354
 80a0a54:	20000355 	.word	0x20000355
 80a0a58:	20000352 	.word	0x20000352
 80a0a5c:	20000353 	.word	0x20000353
 80a0a60:	20000351 	.word	0x20000351

080a0a64 <_ZN11USARTSerialD1Ev>:
private:
  HAL_USART_Serial _serial;
  bool _blocking;
public:
  USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer);
  virtual ~USARTSerial() {};
 80a0a64:	4770      	bx	lr

080a0a66 <_ZN11USARTSerial14blockOnOverrunEb>:
    HAL_USART_Half_Duplex(_serial, Enable);
}

void USARTSerial::blockOnOverrun(bool block)
{
  _blocking = block;
 80a0a66:	7441      	strb	r1, [r0, #17]
 80a0a68:	4770      	bx	lr

080a0a6a <_ZN11USARTSerial17availableForWriteEv>:
}


int USARTSerial::availableForWrite(void)
{
  return HAL_USART_Available_Data(_serial);
 80a0a6a:	7c00      	ldrb	r0, [r0, #16]
 80a0a6c:	f7ff bc84 	b.w	80a0378 <HAL_USART_Available_Data>

080a0a70 <_ZN11USARTSerial9availableEv>:
}

int USARTSerial::available(void)
{
  return HAL_USART_Available_Data(_serial);
 80a0a70:	7c00      	ldrb	r0, [r0, #16]
 80a0a72:	f7ff bc81 	b.w	80a0378 <HAL_USART_Available_Data>

080a0a76 <_ZN11USARTSerial4peekEv>:
}

int USARTSerial::peek(void)
{
  return HAL_USART_Peek_Data(_serial);
 80a0a76:	7c00      	ldrb	r0, [r0, #16]
 80a0a78:	f7ff bc8e 	b.w	80a0398 <HAL_USART_Peek_Data>

080a0a7c <_ZN11USARTSerial4readEv>:
}

int USARTSerial::read(void)
{
  return HAL_USART_Read_Data(_serial);
 80a0a7c:	7c00      	ldrb	r0, [r0, #16]
 80a0a7e:	f7ff bc83 	b.w	80a0388 <HAL_USART_Read_Data>

080a0a82 <_ZN11USARTSerial5flushEv>:
}

void USARTSerial::flush()
{
  HAL_USART_Flush_Data(_serial);
 80a0a82:	7c00      	ldrb	r0, [r0, #16]
 80a0a84:	f7ff bc90 	b.w	80a03a8 <HAL_USART_Flush_Data>

080a0a88 <_ZN11USARTSerialD0Ev>:
 80a0a88:	b510      	push	{r4, lr}
 80a0a8a:	4604      	mov	r4, r0
 80a0a8c:	f7ff fb05 	bl	80a009a <_ZdlPv>
 80a0a90:	4620      	mov	r0, r4
 80a0a92:	bd10      	pop	{r4, pc}

080a0a94 <_ZN11USARTSerial5writeEh>:
}

size_t USARTSerial::write(uint8_t c)
{
 80a0a94:	b570      	push	{r4, r5, r6, lr}
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
 80a0a96:	7c45      	ldrb	r5, [r0, #17]
{
  HAL_USART_Flush_Data(_serial);
}

size_t USARTSerial::write(uint8_t c)
{
 80a0a98:	4604      	mov	r4, r0
 80a0a9a:	460e      	mov	r6, r1
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
 80a0a9c:	b925      	cbnz	r5, 80a0aa8 <_ZN11USARTSerial5writeEh+0x14>
 80a0a9e:	7c00      	ldrb	r0, [r0, #16]
 80a0aa0:	f7ff fc8a 	bl	80a03b8 <HAL_USART_Available_Data_For_Write>
 80a0aa4:	2800      	cmp	r0, #0
 80a0aa6:	dd05      	ble.n	80a0ab4 <_ZN11USARTSerial5writeEh+0x20>
    // the HAL always blocks.
	  return HAL_USART_Write_Data(_serial, c);
 80a0aa8:	7c20      	ldrb	r0, [r4, #16]
 80a0aaa:	4631      	mov	r1, r6
  }
  return 0;
}
 80a0aac:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
size_t USARTSerial::write(uint8_t c)
{
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
    // the HAL always blocks.
	  return HAL_USART_Write_Data(_serial, c);
 80a0ab0:	f7ff bc5a 	b.w	80a0368 <HAL_USART_Write_Data>
  }
  return 0;
}
 80a0ab4:	4628      	mov	r0, r5
 80a0ab6:	bd70      	pop	{r4, r5, r6, pc}

080a0ab8 <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_>:
#include "spark_wiring_usartserial.h"
#include "spark_wiring_constants.h"

// Constructors ////////////////////////////////////////////////////////////////

USARTSerial::USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer)
 80a0ab8:	b510      	push	{r4, lr}
 80a0aba:	4604      	mov	r4, r0
  protected:
    void setWriteError(int err = 1) { write_error = err; }
    size_t printf_impl(bool newline, const char* format, ...);

  public:
    Print() : write_error(0) {}
 80a0abc:	2000      	movs	r0, #0
 80a0abe:	6060      	str	r0, [r4, #4]
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
 80a0ac0:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80a0ac4:	60a0      	str	r0, [r4, #8]
 80a0ac6:	4806      	ldr	r0, [pc, #24]	; (80a0ae0 <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_+0x28>)
{
  _serial = serial;
 80a0ac8:	7421      	strb	r1, [r4, #16]
#include "spark_wiring_usartserial.h"
#include "spark_wiring_constants.h"

// Constructors ////////////////////////////////////////////////////////////////

USARTSerial::USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer)
 80a0aca:	6020      	str	r0, [r4, #0]
{
  _serial = serial;
  // Default is blocking mode
  _blocking = true;
 80a0acc:	2001      	movs	r0, #1
 80a0ace:	7460      	strb	r0, [r4, #17]
  HAL_USART_Init(serial, rx_buffer, tx_buffer);
 80a0ad0:	4608      	mov	r0, r1
 80a0ad2:	4611      	mov	r1, r2
 80a0ad4:	461a      	mov	r2, r3
 80a0ad6:	f7ff fc3f 	bl	80a0358 <HAL_USART_Init>
}
 80a0ada:	4620      	mov	r0, r4
 80a0adc:	bd10      	pop	{r4, pc}
 80a0ade:	bf00      	nop
 80a0ae0:	080a1048 	.word	0x080a1048

080a0ae4 <_ZN11USARTSerial5beginEmm>:
  begin(baud, SERIAL_8N1);
}

void USARTSerial::begin(unsigned long baud, uint32_t config)
{
  HAL_USART_BeginConfig(_serial, baud, config, 0);
 80a0ae4:	7c00      	ldrb	r0, [r0, #16]
 80a0ae6:	2300      	movs	r3, #0
 80a0ae8:	f7ff bc7e 	b.w	80a03e8 <HAL_USART_BeginConfig>

080a0aec <_ZN11USARTSerial5beginEm>:
}
// Public Methods //////////////////////////////////////////////////////////////

void USARTSerial::begin(unsigned long baud)
{
  begin(baud, SERIAL_8N1);
 80a0aec:	2200      	movs	r2, #0
 80a0aee:	f7ff bff9 	b.w	80a0ae4 <_ZN11USARTSerial5beginEmm>
	...

080a0af4 <_Z22__fetch_global_Serial1v>:
// Preinstantiate Objects //////////////////////////////////////////////////////
static Ring_Buffer serial1_rx_buffer;
static Ring_Buffer serial1_tx_buffer;

USARTSerial& __fetch_global_Serial1()
{
 80a0af4:	b538      	push	{r3, r4, r5, lr}
	static USARTSerial serial1(HAL_USART_SERIAL1, &serial1_rx_buffer, &serial1_tx_buffer);
 80a0af6:	4d0c      	ldr	r5, [pc, #48]	; (80a0b28 <_Z22__fetch_global_Serial1v+0x34>)
 80a0af8:	6829      	ldr	r1, [r5, #0]
 80a0afa:	f011 0401 	ands.w	r4, r1, #1
 80a0afe:	d111      	bne.n	80a0b24 <_Z22__fetch_global_Serial1v+0x30>
 80a0b00:	4628      	mov	r0, r5
 80a0b02:	f7ff facc 	bl	80a009e <__cxa_guard_acquire>
 80a0b06:	b168      	cbz	r0, 80a0b24 <_Z22__fetch_global_Serial1v+0x30>
 80a0b08:	4621      	mov	r1, r4
 80a0b0a:	4a08      	ldr	r2, [pc, #32]	; (80a0b2c <_Z22__fetch_global_Serial1v+0x38>)
 80a0b0c:	4b08      	ldr	r3, [pc, #32]	; (80a0b30 <_Z22__fetch_global_Serial1v+0x3c>)
 80a0b0e:	4809      	ldr	r0, [pc, #36]	; (80a0b34 <_Z22__fetch_global_Serial1v+0x40>)
 80a0b10:	f7ff ffd2 	bl	80a0ab8 <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_>
 80a0b14:	4628      	mov	r0, r5
 80a0b16:	f7ff fac7 	bl	80a00a8 <__cxa_guard_release>
 80a0b1a:	4806      	ldr	r0, [pc, #24]	; (80a0b34 <_Z22__fetch_global_Serial1v+0x40>)
 80a0b1c:	4906      	ldr	r1, [pc, #24]	; (80a0b38 <_Z22__fetch_global_Serial1v+0x44>)
 80a0b1e:	4a07      	ldr	r2, [pc, #28]	; (80a0b3c <_Z22__fetch_global_Serial1v+0x48>)
 80a0b20:	f000 f950 	bl	80a0dc4 <__aeabi_atexit>
	return serial1;
}
 80a0b24:	4803      	ldr	r0, [pc, #12]	; (80a0b34 <_Z22__fetch_global_Serial1v+0x40>)
 80a0b26:	bd38      	pop	{r3, r4, r5, pc}
 80a0b28:	200003f0 	.word	0x200003f0
 80a0b2c:	200003f4 	.word	0x200003f4
 80a0b30:	2000036c 	.word	0x2000036c
 80a0b34:	20000358 	.word	0x20000358
 80a0b38:	080a0a65 	.word	0x080a0a65
 80a0b3c:	20000304 	.word	0x20000304

080a0b40 <_ZN9USBSerial14blockOnOverrunEb>:
  USB_USART_Flush_Data();
}

void USBSerial::blockOnOverrun(bool block)
{
  _blocking = block;
 80a0b40:	7401      	strb	r1, [r0, #16]
 80a0b42:	4770      	bx	lr

080a0b44 <_ZN9USBSerialD1Ev>:

#include "spark_wiring_stream.h"
#include "usb_hal.h"
#include "system_task.h"

class USBSerial : public Stream
 80a0b44:	4770      	bx	lr

080a0b46 <_ZN9USBSerial4readEv>:


// Read data from buffer
int USBSerial::read()
{
	return USB_USART_Receive_Data(false);
 80a0b46:	2000      	movs	r0, #0
 80a0b48:	f7ff bbf6 	b.w	80a0338 <USB_USART_Receive_Data>

080a0b4c <_ZN9USBSerial4peekEv>:
  _blocking = block;
}

int USBSerial::peek()
{
	return USB_USART_Receive_Data(true);
 80a0b4c:	2001      	movs	r0, #1
 80a0b4e:	f7ff bbf3 	b.w	80a0338 <USB_USART_Receive_Data>

080a0b52 <_ZN9USBSerial17availableForWriteEv>:
	return USB_USART_Receive_Data(false);
}

int USBSerial::availableForWrite()
{
  return USB_USART_Available_Data_For_Write();
 80a0b52:	f7ff bc39 	b.w	80a03c8 <USB_USART_Available_Data_For_Write>

080a0b56 <_ZN9USBSerial9availableEv>:
}

int USBSerial::available()
{
 80a0b56:	b508      	push	{r3, lr}
	return USB_USART_Available_Data();
 80a0b58:	f7ff fbe6 	bl	80a0328 <USB_USART_Available_Data>
}
 80a0b5c:	bd08      	pop	{r3, pc}

080a0b5e <_ZN9USBSerial5writeEh>:

size_t USBSerial::write(uint8_t byte)
{
 80a0b5e:	b538      	push	{r3, r4, r5, lr}
 80a0b60:	4605      	mov	r5, r0
 80a0b62:	460c      	mov	r4, r1
  if (USB_USART_Available_Data_For_Write() > 0 || _blocking) {
 80a0b64:	f7ff fc30 	bl	80a03c8 <USB_USART_Available_Data_For_Write>
 80a0b68:	2800      	cmp	r0, #0
 80a0b6a:	dc01      	bgt.n	80a0b70 <_ZN9USBSerial5writeEh+0x12>
 80a0b6c:	7c28      	ldrb	r0, [r5, #16]
 80a0b6e:	b118      	cbz	r0, 80a0b78 <_ZN9USBSerial5writeEh+0x1a>
    USB_USART_Send_Data(byte);
 80a0b70:	4620      	mov	r0, r4
 80a0b72:	f7ff fbe9 	bl	80a0348 <USB_USART_Send_Data>
    return 1;
 80a0b76:	2001      	movs	r0, #1
  }
  return 0;
}
 80a0b78:	bd38      	pop	{r3, r4, r5, pc}

080a0b7a <_ZN9USBSerial5flushEv>:

void USBSerial::flush()
{
  USB_USART_Flush_Data();
 80a0b7a:	f7ff bc2d 	b.w	80a03d8 <USB_USART_Flush_Data>

080a0b7e <_ZN9USBSerialD0Ev>:
 80a0b7e:	b510      	push	{r4, lr}
 80a0b80:	4604      	mov	r4, r0
 80a0b82:	f7ff fa8a 	bl	80a009a <_ZdlPv>
 80a0b86:	4620      	mov	r0, r4
 80a0b88:	bd10      	pop	{r4, pc}
	...

080a0b8c <_ZN9USBSerialC1Ev>:
 80a0b8c:	2200      	movs	r2, #0
 80a0b8e:	6042      	str	r2, [r0, #4]
 80a0b90:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80a0b94:	6082      	str	r2, [r0, #8]
#include "spark_wiring_usbserial.h"

//
// Constructor
//
USBSerial::USBSerial()
 80a0b96:	4a02      	ldr	r2, [pc, #8]	; (80a0ba0 <_ZN9USBSerialC1Ev+0x14>)
 80a0b98:	6002      	str	r2, [r0, #0]
{
  _blocking = true;
 80a0b9a:	2201      	movs	r2, #1
 80a0b9c:	7402      	strb	r2, [r0, #16]
}
 80a0b9e:	4770      	bx	lr
 80a0ba0:	080a1078 	.word	0x080a1078

080a0ba4 <_ZN9USBSerial5beginEl>:
// Public methods
//

void USBSerial::begin(long speed)
{
    USB_USART_Init((unsigned)speed);
 80a0ba4:	4608      	mov	r0, r1
 80a0ba6:	f7ff bbb7 	b.w	80a0318 <USB_USART_Init>
	...

080a0bac <_Z20_fetch_global_serialv>:
}

// Preinstantiate Objects //////////////////////////////////////////////////////
#ifdef SPARK_USB_SERIAL
USBSerial& _fetch_global_serial()
{
 80a0bac:	b510      	push	{r4, lr}
	static USBSerial _globalSerial;
 80a0bae:	4c0a      	ldr	r4, [pc, #40]	; (80a0bd8 <_Z20_fetch_global_serialv+0x2c>)
 80a0bb0:	6823      	ldr	r3, [r4, #0]
 80a0bb2:	07db      	lsls	r3, r3, #31
 80a0bb4:	d40e      	bmi.n	80a0bd4 <_Z20_fetch_global_serialv+0x28>
 80a0bb6:	4620      	mov	r0, r4
 80a0bb8:	f7ff fa71 	bl	80a009e <__cxa_guard_acquire>
 80a0bbc:	b150      	cbz	r0, 80a0bd4 <_Z20_fetch_global_serialv+0x28>
 80a0bbe:	4807      	ldr	r0, [pc, #28]	; (80a0bdc <_Z20_fetch_global_serialv+0x30>)
 80a0bc0:	f7ff ffe4 	bl	80a0b8c <_ZN9USBSerialC1Ev>
 80a0bc4:	4620      	mov	r0, r4
 80a0bc6:	f7ff fa6f 	bl	80a00a8 <__cxa_guard_release>
 80a0bca:	4804      	ldr	r0, [pc, #16]	; (80a0bdc <_Z20_fetch_global_serialv+0x30>)
 80a0bcc:	4904      	ldr	r1, [pc, #16]	; (80a0be0 <_Z20_fetch_global_serialv+0x34>)
 80a0bce:	4a05      	ldr	r2, [pc, #20]	; (80a0be4 <_Z20_fetch_global_serialv+0x38>)
 80a0bd0:	f000 f8f8 	bl	80a0dc4 <__aeabi_atexit>
	return _globalSerial;
}
 80a0bd4:	4801      	ldr	r0, [pc, #4]	; (80a0bdc <_Z20_fetch_global_serialv+0x30>)
 80a0bd6:	bd10      	pop	{r4, pc}
 80a0bd8:	2000048c 	.word	0x2000048c
 80a0bdc:	20000478 	.word	0x20000478
 80a0be0:	080a0b45 	.word	0x080a0b45
 80a0be4:	20000304 	.word	0x20000304

080a0be8 <_ZN5spark9WiFiClassD1Ev>:
        wlan_set_ipaddress_source(source, true, NULL);
    }

public:
    WiFiClass() {}
    ~WiFiClass() {}
 80a0be8:	4770      	bx	lr

080a0bea <_ZN5spark9WiFiClass5readyEv>:
    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
    }

    bool ready(void) {
        return network_ready(*this, 0, NULL);
 80a0bea:	2000      	movs	r0, #0
 80a0bec:	4601      	mov	r1, r0
 80a0bee:	4602      	mov	r2, r0
 80a0bf0:	f7ff bc1a 	b.w	80a0428 <network_ready>

080a0bf4 <_GLOBAL__sub_I__ZN5spark9WiFiClass4scanEP15WiFiAccessPointj>:
    void setIPAddressSource(IPAddressSource source) {
        wlan_set_ipaddress_source(source, true, NULL);
    }

public:
    WiFiClass() {}
 80a0bf4:	4803      	ldr	r0, [pc, #12]	; (80a0c04 <_GLOBAL__sub_I__ZN5spark9WiFiClass4scanEP15WiFiAccessPointj+0x10>)
 80a0bf6:	4b04      	ldr	r3, [pc, #16]	; (80a0c08 <_GLOBAL__sub_I__ZN5spark9WiFiClass4scanEP15WiFiAccessPointj+0x14>)
one second timeout is reached). If the aforementioned "bug" is ever fixed by
TI, no changes need to be made to this function, as it would be implemented
the same way.
*****************************************************************************/

    WiFiClass WiFi;
 80a0bf8:	4904      	ldr	r1, [pc, #16]	; (80a0c0c <_GLOBAL__sub_I__ZN5spark9WiFiClass4scanEP15WiFiAccessPointj+0x18>)
 80a0bfa:	4a05      	ldr	r2, [pc, #20]	; (80a0c10 <_GLOBAL__sub_I__ZN5spark9WiFiClass4scanEP15WiFiAccessPointj+0x1c>)
 80a0bfc:	6003      	str	r3, [r0, #0]
 80a0bfe:	f000 b8e1 	b.w	80a0dc4 <__aeabi_atexit>
 80a0c02:	bf00      	nop
 80a0c04:	20000490 	.word	0x20000490
 80a0c08:	080a10a8 	.word	0x080a10a8
 80a0c0c:	080a0be9 	.word	0x080a0be9
 80a0c10:	20000304 	.word	0x20000304

080a0c14 <serialEventRun>:

/**
 * Provides background processing of serial data.
 */
void serialEventRun()
{
 80a0c14:	b508      	push	{r3, lr}
    if (serialEvent && Serial.available()>0)
 80a0c16:	4b0f      	ldr	r3, [pc, #60]	; (80a0c54 <serialEventRun+0x40>)
 80a0c18:	b133      	cbz	r3, 80a0c28 <serialEventRun+0x14>
 80a0c1a:	f7ff ffc7 	bl	80a0bac <_Z20_fetch_global_serialv>
 80a0c1e:	6803      	ldr	r3, [r0, #0]
 80a0c20:	691b      	ldr	r3, [r3, #16]
 80a0c22:	4798      	blx	r3
 80a0c24:	2800      	cmp	r0, #0
 80a0c26:	dc0d      	bgt.n	80a0c44 <serialEventRun+0x30>
        serialEvent();

    if (serialEvent1 && Serial1.available()>0)
 80a0c28:	4b0b      	ldr	r3, [pc, #44]	; (80a0c58 <serialEventRun+0x44>)
 80a0c2a:	b133      	cbz	r3, 80a0c3a <serialEventRun+0x26>
 80a0c2c:	f7ff ff62 	bl	80a0af4 <_Z22__fetch_global_Serial1v>
 80a0c30:	6803      	ldr	r3, [r0, #0]
 80a0c32:	691b      	ldr	r3, [r3, #16]
 80a0c34:	4798      	blx	r3
 80a0c36:	2800      	cmp	r0, #0
 80a0c38:	dc07      	bgt.n	80a0c4a <serialEventRun+0x36>
        serialEvent1();

#if Wiring_Serial2
    if (serialEventRun2) serialEventRun2();
 80a0c3a:	4b08      	ldr	r3, [pc, #32]	; (80a0c5c <serialEventRun+0x48>)
 80a0c3c:	b143      	cbz	r3, 80a0c50 <serialEventRun+0x3c>
 80a0c3e:	f3af 8000 	nop.w
 80a0c42:	bd08      	pop	{r3, pc}
 * Provides background processing of serial data.
 */
void serialEventRun()
{
    if (serialEvent && Serial.available()>0)
        serialEvent();
 80a0c44:	f3af 8000 	nop.w
 80a0c48:	e7ee      	b.n	80a0c28 <serialEventRun+0x14>

    if (serialEvent1 && Serial1.available()>0)
        serialEvent1();
 80a0c4a:	f3af 8000 	nop.w
 80a0c4e:	e7f4      	b.n	80a0c3a <serialEventRun+0x26>
 80a0c50:	bd08      	pop	{r3, pc}
 80a0c52:	bf00      	nop
	...

080a0c60 <_post_loop>:
#if Wiring_Serial5
void serialEvent5() __attribute__((weak));
#endif

void _post_loop()
{
 80a0c60:	b508      	push	{r3, lr}
	serialEventRun();
 80a0c62:	f7ff ffd7 	bl	80a0c14 <serialEventRun>
		return !timeout_fn;
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
 80a0c66:	f7ff fb3f 	bl	80a02e8 <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
 80a0c6a:	4b01      	ldr	r3, [pc, #4]	; (80a0c70 <_post_loop+0x10>)
 80a0c6c:	6018      	str	r0, [r3, #0]
 80a0c6e:	bd08      	pop	{r3, pc}
 80a0c70:	2000049c 	.word	0x2000049c

080a0c74 <_Z33system_initialize_user_backup_ramv>:
 * the dynamically linked application module.
 */
void system_initialize_user_backup_ram()
{
    size_t len = &link_global_retained_end-&link_global_retained_start;
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
 80a0c74:	4802      	ldr	r0, [pc, #8]	; (80a0c80 <_Z33system_initialize_user_backup_ramv+0xc>)
 80a0c76:	4a03      	ldr	r2, [pc, #12]	; (80a0c84 <_Z33system_initialize_user_backup_ramv+0x10>)
 80a0c78:	4903      	ldr	r1, [pc, #12]	; (80a0c88 <_Z33system_initialize_user_backup_ramv+0x14>)
 80a0c7a:	1a12      	subs	r2, r2, r0
 80a0c7c:	f000 b97a 	b.w	80a0f74 <memcpy>
 80a0c80:	40024000 	.word	0x40024000
 80a0c84:	40024004 	.word	0x40024004
 80a0c88:	080a1110 	.word	0x080a1110

080a0c8c <module_user_init_hook>:

#endif


void module_user_init_hook()
{
 80a0c8c:	b538      	push	{r3, r4, r5, lr}
#if PLATFORM_BACKUP_RAM
    backup_ram_was_valid_ =  __backup_sram_signature==signature;
 80a0c8e:	4c09      	ldr	r4, [pc, #36]	; (80a0cb4 <module_user_init_hook+0x28>)
 80a0c90:	4d09      	ldr	r5, [pc, #36]	; (80a0cb8 <module_user_init_hook+0x2c>)
 80a0c92:	6823      	ldr	r3, [r4, #0]
 80a0c94:	1b5a      	subs	r2, r3, r5
 80a0c96:	4253      	negs	r3, r2
 80a0c98:	4153      	adcs	r3, r2
 80a0c9a:	4a08      	ldr	r2, [pc, #32]	; (80a0cbc <module_user_init_hook+0x30>)
 80a0c9c:	7013      	strb	r3, [r2, #0]
    if (!backup_ram_was_valid_) {
 80a0c9e:	b913      	cbnz	r3, 80a0ca6 <module_user_init_hook+0x1a>
        system_initialize_user_backup_ram();
 80a0ca0:	f7ff ffe8 	bl	80a0c74 <_Z33system_initialize_user_backup_ramv>
        __backup_sram_signature = signature;
 80a0ca4:	6025      	str	r5, [r4, #0]
    /* for dynamically linked user part, set the random seed if the user
     * app defines random_seed_from_cloud.
     */
// todo - add a RNG define for that capability
#if defined(STM32F2XX)
    if (random_seed_from_cloud) {
 80a0ca6:	4b06      	ldr	r3, [pc, #24]	; (80a0cc0 <module_user_init_hook+0x34>)
 80a0ca8:	b11b      	cbz	r3, 80a0cb2 <module_user_init_hook+0x26>
    		uint32_t seed = HAL_RNG_GetRandomNumber();
 80a0caa:	f7ff fb15 	bl	80a02d8 <HAL_RNG_GetRandomNumber>
    		random_seed_from_cloud(seed);
 80a0cae:	f3af 8000 	nop.w
 80a0cb2:	bd38      	pop	{r3, r4, r5, pc}
 80a0cb4:	40024000 	.word	0x40024000
 80a0cb8:	9a271c1e 	.word	0x9a271c1e
 80a0cbc:	20000494 	.word	0x20000494
 80a0cc0:	00000000 	.word	0x00000000

080a0cc4 <_GLOBAL__sub_I_pinMode>:
{
public:
    typedef uint8_t flag_t;
    inline SleepNetworkFlag(SystemSleepNetwork f) : SleepNetworkFlag(static_cast<flag_t>(f)) {}

    inline SleepNetworkFlag(flag_t flag) : flag_(flag) {}
 80a0cc4:	4b06      	ldr	r3, [pc, #24]	; (80a0ce0 <_GLOBAL__sub_I_pinMode+0x1c>)
 80a0cc6:	2200      	movs	r2, #0
 80a0cc8:	4906      	ldr	r1, [pc, #24]	; (80a0ce4 <_GLOBAL__sub_I_pinMode+0x20>)
 80a0cca:	701a      	strb	r2, [r3, #0]
 80a0ccc:	2301      	movs	r3, #1
 80a0cce:	700b      	strb	r3, [r1, #0]

class PublishFlag
{
public:
	typedef uint8_t flag_t;
	PublishFlag(flag_t flag) : flag_(flag) {}
 80a0cd0:	4905      	ldr	r1, [pc, #20]	; (80a0ce8 <_GLOBAL__sub_I_pinMode+0x24>)
 80a0cd2:	700a      	strb	r2, [r1, #0]
 80a0cd4:	4a05      	ldr	r2, [pc, #20]	; (80a0cec <_GLOBAL__sub_I_pinMode+0x28>)
 80a0cd6:	7013      	strb	r3, [r2, #0]
 80a0cd8:	4b05      	ldr	r3, [pc, #20]	; (80a0cf0 <_GLOBAL__sub_I_pinMode+0x2c>)
 80a0cda:	2202      	movs	r2, #2
 80a0cdc:	701a      	strb	r2, [r3, #0]
 80a0cde:	4770      	bx	lr
 80a0ce0:	20000498 	.word	0x20000498
 80a0ce4:	20000499 	.word	0x20000499
 80a0ce8:	20000496 	.word	0x20000496
 80a0cec:	20000497 	.word	0x20000497
 80a0cf0:	20000495 	.word	0x20000495

080a0cf4 <_GLOBAL__sub_I_Particle>:
 80a0cf4:	4b06      	ldr	r3, [pc, #24]	; (80a0d10 <_GLOBAL__sub_I_Particle+0x1c>)
 80a0cf6:	2200      	movs	r2, #0
 80a0cf8:	4906      	ldr	r1, [pc, #24]	; (80a0d14 <_GLOBAL__sub_I_Particle+0x20>)
 80a0cfa:	701a      	strb	r2, [r3, #0]
 80a0cfc:	2301      	movs	r3, #1
 80a0cfe:	700b      	strb	r3, [r1, #0]
 80a0d00:	4905      	ldr	r1, [pc, #20]	; (80a0d18 <_GLOBAL__sub_I_Particle+0x24>)
 80a0d02:	700a      	strb	r2, [r1, #0]
 80a0d04:	4a05      	ldr	r2, [pc, #20]	; (80a0d1c <_GLOBAL__sub_I_Particle+0x28>)
 80a0d06:	7013      	strb	r3, [r2, #0]
 80a0d08:	4b05      	ldr	r3, [pc, #20]	; (80a0d20 <_GLOBAL__sub_I_Particle+0x2c>)
 80a0d0a:	2202      	movs	r2, #2
 80a0d0c:	701a      	strb	r2, [r3, #0]
 80a0d0e:	4770      	bx	lr
 80a0d10:	200004a3 	.word	0x200004a3
 80a0d14:	200004a4 	.word	0x200004a4
 80a0d18:	200004a1 	.word	0x200004a1
 80a0d1c:	200004a2 	.word	0x200004a2
 80a0d20:	200004a0 	.word	0x200004a0

080a0d24 <_GLOBAL__sub_I_INADDR_NONE>:
#include "spark_wiring_ipaddress.h"

const IPAddress INADDR_NONE(0, 0, 0, 0);
 80a0d24:	b513      	push	{r0, r1, r4, lr}
 80a0d26:	4c08      	ldr	r4, [pc, #32]	; (80a0d48 <_GLOBAL__sub_I_INADDR_NONE+0x24>)
 80a0d28:	2100      	movs	r1, #0
 80a0d2a:	9100      	str	r1, [sp, #0]
 80a0d2c:	460a      	mov	r2, r1
 80a0d2e:	460b      	mov	r3, r1
 80a0d30:	4620      	mov	r0, r4
 80a0d32:	f7ff fc6d 	bl	80a0610 <_ZN9IPAddressC1Ehhhh>
 80a0d36:	4620      	mov	r0, r4
 80a0d38:	4904      	ldr	r1, [pc, #16]	; (80a0d4c <_GLOBAL__sub_I_INADDR_NONE+0x28>)
 80a0d3a:	4a05      	ldr	r2, [pc, #20]	; (80a0d50 <_GLOBAL__sub_I_INADDR_NONE+0x2c>)
 80a0d3c:	b002      	add	sp, #8
 80a0d3e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80a0d42:	f000 b83f 	b.w	80a0dc4 <__aeabi_atexit>
 80a0d46:	bf00      	nop
 80a0d48:	200004a8 	.word	0x200004a8
 80a0d4c:	080a05b5 	.word	0x080a05b5
 80a0d50:	20000304 	.word	0x20000304

080a0d54 <_GLOBAL__sub_I_SPI>:
#ifndef SPARK_WIRING_NO_SPI

SPIClass SPI(HAL_SPI_INTERFACE1);

#if Wiring_SPI1
SPIClass SPI1(HAL_SPI_INTERFACE2);
 80a0d54:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80a0d56:	4b12      	ldr	r3, [pc, #72]	; (80a0da0 <_GLOBAL__sub_I_SPI+0x4c>)
 80a0d58:	2100      	movs	r1, #0
 80a0d5a:	7019      	strb	r1, [r3, #0]
 80a0d5c:	4b11      	ldr	r3, [pc, #68]	; (80a0da4 <_GLOBAL__sub_I_SPI+0x50>)
 80a0d5e:	2401      	movs	r4, #1
 80a0d60:	701c      	strb	r4, [r3, #0]
 80a0d62:	4b11      	ldr	r3, [pc, #68]	; (80a0da8 <_GLOBAL__sub_I_SPI+0x54>)
#include "core_hal.h"
#include "spark_macros.h"

#ifndef SPARK_WIRING_NO_SPI

SPIClass SPI(HAL_SPI_INTERFACE1);
 80a0d64:	4f11      	ldr	r7, [pc, #68]	; (80a0dac <_GLOBAL__sub_I_SPI+0x58>)
 80a0d66:	7019      	strb	r1, [r3, #0]
 80a0d68:	4b11      	ldr	r3, [pc, #68]	; (80a0db0 <_GLOBAL__sub_I_SPI+0x5c>)
 80a0d6a:	2202      	movs	r2, #2
 80a0d6c:	701c      	strb	r4, [r3, #0]
 80a0d6e:	4b11      	ldr	r3, [pc, #68]	; (80a0db4 <_GLOBAL__sub_I_SPI+0x60>)
 80a0d70:	4e11      	ldr	r6, [pc, #68]	; (80a0db8 <_GLOBAL__sub_I_SPI+0x64>)
 80a0d72:	4d12      	ldr	r5, [pc, #72]	; (80a0dbc <_GLOBAL__sub_I_SPI+0x68>)
 80a0d74:	4638      	mov	r0, r7
 80a0d76:	701a      	strb	r2, [r3, #0]
 80a0d78:	f7ff fcfe 	bl	80a0778 <_ZN8SPIClassC1E17HAL_SPI_Interface>
 80a0d7c:	4638      	mov	r0, r7

#if Wiring_SPI1
SPIClass SPI1(HAL_SPI_INTERFACE2);
 80a0d7e:	4f10      	ldr	r7, [pc, #64]	; (80a0dc0 <_GLOBAL__sub_I_SPI+0x6c>)
#include "core_hal.h"
#include "spark_macros.h"

#ifndef SPARK_WIRING_NO_SPI

SPIClass SPI(HAL_SPI_INTERFACE1);
 80a0d80:	462a      	mov	r2, r5
 80a0d82:	4631      	mov	r1, r6
 80a0d84:	f000 f81e 	bl	80a0dc4 <__aeabi_atexit>

#if Wiring_SPI1
SPIClass SPI1(HAL_SPI_INTERFACE2);
 80a0d88:	4621      	mov	r1, r4
 80a0d8a:	4638      	mov	r0, r7
 80a0d8c:	f7ff fcf4 	bl	80a0778 <_ZN8SPIClassC1E17HAL_SPI_Interface>
 80a0d90:	4638      	mov	r0, r7
 80a0d92:	4631      	mov	r1, r6
 80a0d94:	462a      	mov	r2, r5
 80a0d96:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 80a0d9a:	f000 b813 	b.w	80a0dc4 <__aeabi_atexit>
 80a0d9e:	bf00      	nop
 80a0da0:	200004c3 	.word	0x200004c3
 80a0da4:	200004c4 	.word	0x200004c4
 80a0da8:	200004c1 	.word	0x200004c1
 80a0dac:	200004c8 	.word	0x200004c8
 80a0db0:	200004c2 	.word	0x200004c2
 80a0db4:	200004c0 	.word	0x200004c0
 80a0db8:	080a0769 	.word	0x080a0769
 80a0dbc:	20000304 	.word	0x20000304
 80a0dc0:	200004d4 	.word	0x200004d4

080a0dc4 <__aeabi_atexit>:
 80a0dc4:	4603      	mov	r3, r0
 80a0dc6:	4608      	mov	r0, r1
 80a0dc8:	4619      	mov	r1, r3
 80a0dca:	f000 b8c5 	b.w	80a0f58 <__cxa_atexit>
	...

080a0dd0 <_GLOBAL__sub_I__ZTSSt16__numpunct_cacheIwE>:
 80a0dd0:	4b24      	ldr	r3, [pc, #144]	; (80a0e64 <_GLOBAL__sub_I__ZTSSt16__numpunct_cacheIwE+0x94>)
 80a0dd2:	681a      	ldr	r2, [r3, #0]
 80a0dd4:	07d0      	lsls	r0, r2, #31
 80a0dd6:	bf5c      	itt	pl
 80a0dd8:	2201      	movpl	r2, #1
 80a0dda:	601a      	strpl	r2, [r3, #0]
 80a0ddc:	4b22      	ldr	r3, [pc, #136]	; (80a0e68 <_GLOBAL__sub_I__ZTSSt16__numpunct_cacheIwE+0x98>)
 80a0dde:	681a      	ldr	r2, [r3, #0]
 80a0de0:	07d1      	lsls	r1, r2, #31
 80a0de2:	bf5c      	itt	pl
 80a0de4:	2201      	movpl	r2, #1
 80a0de6:	601a      	strpl	r2, [r3, #0]
 80a0de8:	4b20      	ldr	r3, [pc, #128]	; (80a0e6c <_GLOBAL__sub_I__ZTSSt16__numpunct_cacheIwE+0x9c>)
 80a0dea:	681a      	ldr	r2, [r3, #0]
 80a0dec:	07d2      	lsls	r2, r2, #31
 80a0dee:	bf5c      	itt	pl
 80a0df0:	2201      	movpl	r2, #1
 80a0df2:	601a      	strpl	r2, [r3, #0]
 80a0df4:	4b1e      	ldr	r3, [pc, #120]	; (80a0e70 <_GLOBAL__sub_I__ZTSSt16__numpunct_cacheIwE+0xa0>)
 80a0df6:	681a      	ldr	r2, [r3, #0]
 80a0df8:	07d0      	lsls	r0, r2, #31
 80a0dfa:	bf5c      	itt	pl
 80a0dfc:	2201      	movpl	r2, #1
 80a0dfe:	601a      	strpl	r2, [r3, #0]
 80a0e00:	4b1c      	ldr	r3, [pc, #112]	; (80a0e74 <_GLOBAL__sub_I__ZTSSt16__numpunct_cacheIwE+0xa4>)
 80a0e02:	681a      	ldr	r2, [r3, #0]
 80a0e04:	07d1      	lsls	r1, r2, #31
 80a0e06:	bf5c      	itt	pl
 80a0e08:	2201      	movpl	r2, #1
 80a0e0a:	601a      	strpl	r2, [r3, #0]
 80a0e0c:	4b1a      	ldr	r3, [pc, #104]	; (80a0e78 <_GLOBAL__sub_I__ZTSSt16__numpunct_cacheIwE+0xa8>)
 80a0e0e:	681a      	ldr	r2, [r3, #0]
 80a0e10:	07d2      	lsls	r2, r2, #31
 80a0e12:	bf5c      	itt	pl
 80a0e14:	2201      	movpl	r2, #1
 80a0e16:	601a      	strpl	r2, [r3, #0]
 80a0e18:	4b18      	ldr	r3, [pc, #96]	; (80a0e7c <_GLOBAL__sub_I__ZTSSt16__numpunct_cacheIwE+0xac>)
 80a0e1a:	681a      	ldr	r2, [r3, #0]
 80a0e1c:	07d0      	lsls	r0, r2, #31
 80a0e1e:	bf5c      	itt	pl
 80a0e20:	2201      	movpl	r2, #1
 80a0e22:	601a      	strpl	r2, [r3, #0]
 80a0e24:	4b16      	ldr	r3, [pc, #88]	; (80a0e80 <_GLOBAL__sub_I__ZTSSt16__numpunct_cacheIwE+0xb0>)
 80a0e26:	681a      	ldr	r2, [r3, #0]
 80a0e28:	07d1      	lsls	r1, r2, #31
 80a0e2a:	bf5c      	itt	pl
 80a0e2c:	2201      	movpl	r2, #1
 80a0e2e:	601a      	strpl	r2, [r3, #0]
 80a0e30:	4b14      	ldr	r3, [pc, #80]	; (80a0e84 <_GLOBAL__sub_I__ZTSSt16__numpunct_cacheIwE+0xb4>)
 80a0e32:	681a      	ldr	r2, [r3, #0]
 80a0e34:	07d2      	lsls	r2, r2, #31
 80a0e36:	bf5c      	itt	pl
 80a0e38:	2201      	movpl	r2, #1
 80a0e3a:	601a      	strpl	r2, [r3, #0]
 80a0e3c:	4b12      	ldr	r3, [pc, #72]	; (80a0e88 <_GLOBAL__sub_I__ZTSSt16__numpunct_cacheIwE+0xb8>)
 80a0e3e:	681a      	ldr	r2, [r3, #0]
 80a0e40:	07d0      	lsls	r0, r2, #31
 80a0e42:	bf5c      	itt	pl
 80a0e44:	2201      	movpl	r2, #1
 80a0e46:	601a      	strpl	r2, [r3, #0]
 80a0e48:	4b10      	ldr	r3, [pc, #64]	; (80a0e8c <_GLOBAL__sub_I__ZTSSt16__numpunct_cacheIwE+0xbc>)
 80a0e4a:	681a      	ldr	r2, [r3, #0]
 80a0e4c:	07d1      	lsls	r1, r2, #31
 80a0e4e:	bf5c      	itt	pl
 80a0e50:	2201      	movpl	r2, #1
 80a0e52:	601a      	strpl	r2, [r3, #0]
 80a0e54:	4b0e      	ldr	r3, [pc, #56]	; (80a0e90 <_GLOBAL__sub_I__ZTSSt16__numpunct_cacheIwE+0xc0>)
 80a0e56:	681a      	ldr	r2, [r3, #0]
 80a0e58:	07d2      	lsls	r2, r2, #31
 80a0e5a:	bf5c      	itt	pl
 80a0e5c:	2201      	movpl	r2, #1
 80a0e5e:	601a      	strpl	r2, [r3, #0]
 80a0e60:	4770      	bx	lr
 80a0e62:	bf00      	nop
 80a0e64:	2000050c 	.word	0x2000050c
 80a0e68:	20000508 	.word	0x20000508
 80a0e6c:	20000504 	.word	0x20000504
 80a0e70:	20000500 	.word	0x20000500
 80a0e74:	200004fc 	.word	0x200004fc
 80a0e78:	200004f8 	.word	0x200004f8
 80a0e7c:	200004f4 	.word	0x200004f4
 80a0e80:	200004f0 	.word	0x200004f0
 80a0e84:	200004ec 	.word	0x200004ec
 80a0e88:	200004e8 	.word	0x200004e8
 80a0e8c:	200004e4 	.word	0x200004e4
 80a0e90:	200004e0 	.word	0x200004e0

080a0e94 <_GLOBAL__sub_I__ZTSSt21__ctype_abstract_baseIcE>:
 80a0e94:	4b24      	ldr	r3, [pc, #144]	; (80a0f28 <_GLOBAL__sub_I__ZTSSt21__ctype_abstract_baseIcE+0x94>)
 80a0e96:	681a      	ldr	r2, [r3, #0]
 80a0e98:	07d0      	lsls	r0, r2, #31
 80a0e9a:	bf5c      	itt	pl
 80a0e9c:	2201      	movpl	r2, #1
 80a0e9e:	601a      	strpl	r2, [r3, #0]
 80a0ea0:	4b22      	ldr	r3, [pc, #136]	; (80a0f2c <_GLOBAL__sub_I__ZTSSt21__ctype_abstract_baseIcE+0x98>)
 80a0ea2:	681a      	ldr	r2, [r3, #0]
 80a0ea4:	07d1      	lsls	r1, r2, #31
 80a0ea6:	bf5c      	itt	pl
 80a0ea8:	2201      	movpl	r2, #1
 80a0eaa:	601a      	strpl	r2, [r3, #0]
 80a0eac:	4b20      	ldr	r3, [pc, #128]	; (80a0f30 <_GLOBAL__sub_I__ZTSSt21__ctype_abstract_baseIcE+0x9c>)
 80a0eae:	681a      	ldr	r2, [r3, #0]
 80a0eb0:	07d2      	lsls	r2, r2, #31
 80a0eb2:	bf5c      	itt	pl
 80a0eb4:	2201      	movpl	r2, #1
 80a0eb6:	601a      	strpl	r2, [r3, #0]
 80a0eb8:	4b1e      	ldr	r3, [pc, #120]	; (80a0f34 <_GLOBAL__sub_I__ZTSSt21__ctype_abstract_baseIcE+0xa0>)
 80a0eba:	681a      	ldr	r2, [r3, #0]
 80a0ebc:	07d0      	lsls	r0, r2, #31
 80a0ebe:	bf5c      	itt	pl
 80a0ec0:	2201      	movpl	r2, #1
 80a0ec2:	601a      	strpl	r2, [r3, #0]
 80a0ec4:	4b1c      	ldr	r3, [pc, #112]	; (80a0f38 <_GLOBAL__sub_I__ZTSSt21__ctype_abstract_baseIcE+0xa4>)
 80a0ec6:	681a      	ldr	r2, [r3, #0]
 80a0ec8:	07d1      	lsls	r1, r2, #31
 80a0eca:	bf5c      	itt	pl
 80a0ecc:	2201      	movpl	r2, #1
 80a0ece:	601a      	strpl	r2, [r3, #0]
 80a0ed0:	4b1a      	ldr	r3, [pc, #104]	; (80a0f3c <_GLOBAL__sub_I__ZTSSt21__ctype_abstract_baseIcE+0xa8>)
 80a0ed2:	681a      	ldr	r2, [r3, #0]
 80a0ed4:	07d2      	lsls	r2, r2, #31
 80a0ed6:	bf5c      	itt	pl
 80a0ed8:	2201      	movpl	r2, #1
 80a0eda:	601a      	strpl	r2, [r3, #0]
 80a0edc:	4b18      	ldr	r3, [pc, #96]	; (80a0f40 <_GLOBAL__sub_I__ZTSSt21__ctype_abstract_baseIcE+0xac>)
 80a0ede:	681a      	ldr	r2, [r3, #0]
 80a0ee0:	07d0      	lsls	r0, r2, #31
 80a0ee2:	bf5c      	itt	pl
 80a0ee4:	2201      	movpl	r2, #1
 80a0ee6:	601a      	strpl	r2, [r3, #0]
 80a0ee8:	4b16      	ldr	r3, [pc, #88]	; (80a0f44 <_GLOBAL__sub_I__ZTSSt21__ctype_abstract_baseIcE+0xb0>)
 80a0eea:	681a      	ldr	r2, [r3, #0]
 80a0eec:	07d1      	lsls	r1, r2, #31
 80a0eee:	bf5c      	itt	pl
 80a0ef0:	2201      	movpl	r2, #1
 80a0ef2:	601a      	strpl	r2, [r3, #0]
 80a0ef4:	4b14      	ldr	r3, [pc, #80]	; (80a0f48 <_GLOBAL__sub_I__ZTSSt21__ctype_abstract_baseIcE+0xb4>)
 80a0ef6:	681a      	ldr	r2, [r3, #0]
 80a0ef8:	07d2      	lsls	r2, r2, #31
 80a0efa:	bf5c      	itt	pl
 80a0efc:	2201      	movpl	r2, #1
 80a0efe:	601a      	strpl	r2, [r3, #0]
 80a0f00:	4b12      	ldr	r3, [pc, #72]	; (80a0f4c <_GLOBAL__sub_I__ZTSSt21__ctype_abstract_baseIcE+0xb8>)
 80a0f02:	681a      	ldr	r2, [r3, #0]
 80a0f04:	07d0      	lsls	r0, r2, #31
 80a0f06:	bf5c      	itt	pl
 80a0f08:	2201      	movpl	r2, #1
 80a0f0a:	601a      	strpl	r2, [r3, #0]
 80a0f0c:	4b10      	ldr	r3, [pc, #64]	; (80a0f50 <_GLOBAL__sub_I__ZTSSt21__ctype_abstract_baseIcE+0xbc>)
 80a0f0e:	681a      	ldr	r2, [r3, #0]
 80a0f10:	07d1      	lsls	r1, r2, #31
 80a0f12:	bf5c      	itt	pl
 80a0f14:	2201      	movpl	r2, #1
 80a0f16:	601a      	strpl	r2, [r3, #0]
 80a0f18:	4b0e      	ldr	r3, [pc, #56]	; (80a0f54 <_GLOBAL__sub_I__ZTSSt21__ctype_abstract_baseIcE+0xc0>)
 80a0f1a:	681a      	ldr	r2, [r3, #0]
 80a0f1c:	07d2      	lsls	r2, r2, #31
 80a0f1e:	bf5c      	itt	pl
 80a0f20:	2201      	movpl	r2, #1
 80a0f22:	601a      	strpl	r2, [r3, #0]
 80a0f24:	4770      	bx	lr
 80a0f26:	bf00      	nop
 80a0f28:	2000053c 	.word	0x2000053c
 80a0f2c:	20000538 	.word	0x20000538
 80a0f30:	20000534 	.word	0x20000534
 80a0f34:	20000530 	.word	0x20000530
 80a0f38:	2000052c 	.word	0x2000052c
 80a0f3c:	20000528 	.word	0x20000528
 80a0f40:	20000524 	.word	0x20000524
 80a0f44:	20000520 	.word	0x20000520
 80a0f48:	2000051c 	.word	0x2000051c
 80a0f4c:	20000518 	.word	0x20000518
 80a0f50:	20000514 	.word	0x20000514
 80a0f54:	20000510 	.word	0x20000510

080a0f58 <__cxa_atexit>:
 80a0f58:	b538      	push	{r3, r4, r5, lr}
 80a0f5a:	4605      	mov	r5, r0
 80a0f5c:	4804      	ldr	r0, [pc, #16]	; (80a0f70 <__cxa_atexit+0x18>)
 80a0f5e:	460c      	mov	r4, r1
 80a0f60:	4613      	mov	r3, r2
 80a0f62:	b120      	cbz	r0, 80a0f6e <__cxa_atexit+0x16>
 80a0f64:	2002      	movs	r0, #2
 80a0f66:	4629      	mov	r1, r5
 80a0f68:	4622      	mov	r2, r4
 80a0f6a:	f3af 8000 	nop.w
 80a0f6e:	bd38      	pop	{r3, r4, r5, pc}
 80a0f70:	00000000 	.word	0x00000000

080a0f74 <memcpy>:
 80a0f74:	b510      	push	{r4, lr}
 80a0f76:	1e43      	subs	r3, r0, #1
 80a0f78:	440a      	add	r2, r1
 80a0f7a:	4291      	cmp	r1, r2
 80a0f7c:	d004      	beq.n	80a0f88 <memcpy+0x14>
 80a0f7e:	f811 4b01 	ldrb.w	r4, [r1], #1
 80a0f82:	f803 4f01 	strb.w	r4, [r3, #1]!
 80a0f86:	e7f8      	b.n	80a0f7a <memcpy+0x6>
 80a0f88:	bd10      	pop	{r4, pc}

080a0f8a <memset>:
 80a0f8a:	4603      	mov	r3, r0
 80a0f8c:	4402      	add	r2, r0
 80a0f8e:	4293      	cmp	r3, r2
 80a0f90:	d002      	beq.n	80a0f98 <memset+0xe>
 80a0f92:	f803 1b01 	strb.w	r1, [r3], #1
 80a0f96:	e7fa      	b.n	80a0f8e <memset+0x4>
 80a0f98:	4770      	bx	lr

080a0f9a <strcpy>:
 80a0f9a:	4603      	mov	r3, r0
 80a0f9c:	f811 2b01 	ldrb.w	r2, [r1], #1
 80a0fa0:	f803 2b01 	strb.w	r2, [r3], #1
 80a0fa4:	2a00      	cmp	r2, #0
 80a0fa6:	d1f9      	bne.n	80a0f9c <strcpy+0x2>
 80a0fa8:	4770      	bx	lr

080a0faa <strlen>:
 80a0faa:	4603      	mov	r3, r0
 80a0fac:	f813 2b01 	ldrb.w	r2, [r3], #1
 80a0fb0:	2a00      	cmp	r2, #0
 80a0fb2:	d1fb      	bne.n	80a0fac <strlen+0x2>
 80a0fb4:	1a18      	subs	r0, r3, r0
 80a0fb6:	3801      	subs	r0, #1
 80a0fb8:	4770      	bx	lr

080a0fba <link_code_end>:
	...

080a0fbc <dynalib_user>:
 80a0fbc:	001d 080a 005d 080a 0089 080a 008d 080a     ....]...........
 80a0fcc:	0000 0000 6c66 0020 7266 0020 6c62 0020     ....fl .fr .bl .
 80a0fdc:	7262 0020 6f6d 6576 0000 0000               br .move....

080a0fe8 <_ZTV9IPAddress>:
	...
 80a0ff0:	05c3 080a 05b5 080a 05b7 080a 0000 0000     ................

080a1000 <_ZTV8SPIClass>:
	...
 80a1008:	0769 080a 076b 080a 005a 2b25 3330 3a64     i...k...Z.%+03d:
 80a1018:	3025 7532 2500 2d59 6d25 252d 5464 4825     %02u.%Y-%m-%dT%H
 80a1028:	253a 3a4d 5325 7a25 6100 6373 6974 656d     :%M:%S%z.asctime
	...

080a1040 <_ZTV11USARTSerial>:
	...
 80a1048:	0a65 080a 0a89 080a 0a95 080a 065d 080a     e...........]...
 80a1058:	0a71 080a 0a7d 080a 0a77 080a 0a83 080a     q...}...w.......
 80a1068:	0a67 080a 0a6b 080a                         g...k...

080a1070 <_ZTV9USBSerial>:
	...
 80a1078:	0b45 080a 0b7f 080a 0b5f 080a 065d 080a     E......._...]...
 80a1088:	0b57 080a 0b47 080a 0b4d 080a 0b7b 080a     W...G...M...{...
 80a1098:	0b53 080a 0b41 080a                         S...A...

080a10a0 <_ZTVN5spark9WiFiClassE>:
	...
 80a10a8:	0beb 080a                                   ....

080a10ac <link_const_variable_data_end>:
 80a10ac:	080a0299 	.word	0x080a0299
 80a10b0:	080a0461 	.word	0x080a0461
 80a10b4:	080a0491 	.word	0x080a0491
 80a10b8:	080a0525 	.word	0x080a0525
 80a10bc:	080a0555 	.word	0x080a0555
 80a10c0:	080a0585 	.word	0x080a0585
 80a10c4:	080a062d 	.word	0x080a062d
 80a10c8:	080a0739 	.word	0x080a0739
 80a10cc:	080a0795 	.word	0x080a0795
 80a10d0:	080a07c5 	.word	0x080a07c5
 80a10d4:	080a098d 	.word	0x080a098d
 80a10d8:	080a09c1 	.word	0x080a09c1
 80a10dc:	080a09f1 	.word	0x080a09f1
 80a10e0:	080a0a05 	.word	0x080a0a05
 80a10e4:	080a0a35 	.word	0x080a0a35
 80a10e8:	080a0bf5 	.word	0x080a0bf5
 80a10ec:	080a0cc5 	.word	0x080a0cc5
 80a10f0:	080a0cf5 	.word	0x080a0cf5
 80a10f4:	080a0d25 	.word	0x080a0d25
 80a10f8:	080a0d55 	.word	0x080a0d55
 80a10fc:	080a0dd1 	.word	0x080a0dd1
 80a1100:	080a0e95 	.word	0x080a0e95

080a1104 <link_constructors_end>:
	...
